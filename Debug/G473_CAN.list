
G473_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039fc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08003bdc  08003bdc  00004bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c98  08003c98  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003c98  08003c98  00004c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ca0  08003ca0  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ca0  08003ca0  00004ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ca4  08003ca4  00004ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003ca8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000068  08003d10  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08003d10  00005298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f39  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a88  00000000  00000000  0000dfd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  0000fa60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006f8  00000000  00000000  000103d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020032  00000000  00000000  00010ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b55  00000000  00000000  00030afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7c89  00000000  00000000  0003a64f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001022d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d10  00000000  00000000  0010231c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0010502c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003bc4 	.word	0x08003bc4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08003bc4 	.word	0x08003bc4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002cc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80002d0:	f003 0301 	and.w	r3, r3, #1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d013      	beq.n	8000300 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80002d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002dc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80002e0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d00b      	beq.n	8000300 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002e8:	e000      	b.n	80002ec <ITM_SendChar+0x2c>
    {
      __NOP();
 80002ea:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002ec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d0f9      	beq.n	80002ea <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002f6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	b2d2      	uxtb	r2, r2
 80002fe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000300:	687b      	ldr	r3, [r7, #4]
}
 8000302:	4618      	mov	r0, r3
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
	...

08000310 <HAL_FDCAN_RxFifo0Callback>:
int indx = 0;
volatile int message_counter = 0;
uint32_t fill_level_in_main = 0;

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	f003 0301 	and.w	r3, r3, #1
 8000320:	2b00      	cmp	r3, #0
 8000322:	d026      	beq.n	8000372 <HAL_FDCAN_RxFifo0Callback+0x62>
  {
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000324:	4b15      	ldr	r3, [pc, #84]	@ (800037c <HAL_FDCAN_RxFifo0Callback+0x6c>)
 8000326:	4a16      	ldr	r2, [pc, #88]	@ (8000380 <HAL_FDCAN_RxFifo0Callback+0x70>)
 8000328:	2140      	movs	r1, #64	@ 0x40
 800032a:	6878      	ldr	r0, [r7, #4]
 800032c:	f000 ff14 	bl	8001158 <HAL_FDCAN_GetRxMessage>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <HAL_FDCAN_RxFifo0Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 8000336:	f000 f9d9 	bl	80006ec <Error_Handler>
    }
    message_counter++;
 800033a:	4b12      	ldr	r3, [pc, #72]	@ (8000384 <HAL_FDCAN_RxFifo0Callback+0x74>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	3301      	adds	r3, #1
 8000340:	4a10      	ldr	r2, [pc, #64]	@ (8000384 <HAL_FDCAN_RxFifo0Callback+0x74>)
 8000342:	6013      	str	r3, [r2, #0]
    uint32_t free_level = HAL_FDCAN_GetRxFifoFillLevel(hfdcan, RxFifo0ITs);
 8000344:	6839      	ldr	r1, [r7, #0]
 8000346:	6878      	ldr	r0, [r7, #4]
 8000348:	f001 f80e 	bl	8001368 <HAL_FDCAN_GetRxFifoFillLevel>
 800034c:	60f8      	str	r0, [r7, #12]
    printf("0 Free: %d  Messages: %d  Received ID: 0x%X \n", (int)free_level, message_counter, (int)RxHeader.Identifier);
 800034e:	68f9      	ldr	r1, [r7, #12]
 8000350:	4b0c      	ldr	r3, [pc, #48]	@ (8000384 <HAL_FDCAN_RxFifo0Callback+0x74>)
 8000352:	681a      	ldr	r2, [r3, #0]
 8000354:	4b0a      	ldr	r3, [pc, #40]	@ (8000380 <HAL_FDCAN_RxFifo0Callback+0x70>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	480b      	ldr	r0, [pc, #44]	@ (8000388 <HAL_FDCAN_RxFifo0Callback+0x78>)
 800035a:	f002 fd67 	bl	8002e2c <iprintf>

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) // Нахуя?
 800035e:	2200      	movs	r2, #0
 8000360:	2101      	movs	r1, #1
 8000362:	6878      	ldr	r0, [r7, #4]
 8000364:	f001 f81e 	bl	80013a4 <HAL_FDCAN_ActivateNotification>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <HAL_FDCAN_RxFifo0Callback+0x62>
    {
      /* Notification Error */
      Error_Handler();
 800036e:	f000 f9bd 	bl	80006ec <Error_Handler>
    }
  }
}
 8000372:	bf00      	nop
 8000374:	3710      	adds	r7, #16
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	20000134 	.word	0x20000134
 8000380:	2000010c 	.word	0x2000010c
 8000384:	20000140 	.word	0x20000140
 8000388:	08003bdc 	.word	0x08003bdc

0800038c <HAL_FDCAN_RxFifo1Callback>:

void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b084      	sub	sp, #16
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
  if((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) != RESET)
 8000396:	683b      	ldr	r3, [r7, #0]
 8000398:	f003 0308 	and.w	r3, r3, #8
 800039c:	2b00      	cmp	r3, #0
 800039e:	d026      	beq.n	80003ee <HAL_FDCAN_RxFifo1Callback+0x62>
  {
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &RxHeader, RxData) != HAL_OK)
 80003a0:	4b15      	ldr	r3, [pc, #84]	@ (80003f8 <HAL_FDCAN_RxFifo1Callback+0x6c>)
 80003a2:	4a16      	ldr	r2, [pc, #88]	@ (80003fc <HAL_FDCAN_RxFifo1Callback+0x70>)
 80003a4:	2141      	movs	r1, #65	@ 0x41
 80003a6:	6878      	ldr	r0, [r7, #4]
 80003a8:	f000 fed6 	bl	8001158 <HAL_FDCAN_GetRxMessage>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <HAL_FDCAN_RxFifo1Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 80003b2:	f000 f99b 	bl	80006ec <Error_Handler>
    }

    uint32_t fill_level = HAL_FDCAN_GetRxFifoFillLevel (hfdcan, RxFifo1ITs);
 80003b6:	6839      	ldr	r1, [r7, #0]
 80003b8:	6878      	ldr	r0, [r7, #4]
 80003ba:	f000 ffd5 	bl	8001368 <HAL_FDCAN_GetRxFifoFillLevel>
 80003be:	60f8      	str	r0, [r7, #12]
    message_counter++;
 80003c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000400 <HAL_FDCAN_RxFifo1Callback+0x74>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	3301      	adds	r3, #1
 80003c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000400 <HAL_FDCAN_RxFifo1Callback+0x74>)
 80003c8:	6013      	str	r3, [r2, #0]
    printf("1 Fill: %d  Messages: %d  Received ID: 0x%X \n", (int)fill_level, message_counter, (int)RxHeader.Identifier);
 80003ca:	68f9      	ldr	r1, [r7, #12]
 80003cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000400 <HAL_FDCAN_RxFifo1Callback+0x74>)
 80003ce:	681a      	ldr	r2, [r3, #0]
 80003d0:	4b0a      	ldr	r3, [pc, #40]	@ (80003fc <HAL_FDCAN_RxFifo1Callback+0x70>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	480b      	ldr	r0, [pc, #44]	@ (8000404 <HAL_FDCAN_RxFifo1Callback+0x78>)
 80003d6:	f002 fd29 	bl	8002e2c <iprintf>

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE | FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK) // Нахуя?
 80003da:	2200      	movs	r2, #0
 80003dc:	2109      	movs	r1, #9
 80003de:	6878      	ldr	r0, [r7, #4]
 80003e0:	f000 ffe0 	bl	80013a4 <HAL_FDCAN_ActivateNotification>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <HAL_FDCAN_RxFifo1Callback+0x62>
    {
      /* Notification Error */
      Error_Handler();
 80003ea:	f000 f97f 	bl	80006ec <Error_Handler>
    }
  }
}
 80003ee:	bf00      	nop
 80003f0:	3710      	adds	r7, #16
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	20000134 	.word	0x20000134
 80003fc:	2000010c 	.word	0x2000010c
 8000400:	20000140 	.word	0x20000140
 8000404:	08003c0c 	.word	0x08003c0c

08000408 <__io_putchar>:

int __io_putchar(int ch)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4618      	mov	r0, r3
 8000414:	f7ff ff54 	bl	80002c0 <ITM_SendChar>
	return(ch);
 8000418:	687b      	ldr	r3, [r7, #4]
}
 800041a:	4618      	mov	r0, r3
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000428:	f000 fb17 	bl	8000a5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800042c:	f000 f84e 	bl	80004cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000430:	f000 f910 	bl	8000654 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000434:	f000 f896 	bl	8000564 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  //HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);

  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 8000438:	481f      	ldr	r0, [pc, #124]	@ (80004b8 <main+0x94>)
 800043a:	f000 fe65 	bl	8001108 <HAL_FDCAN_Start>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <main+0x24>
  {
	  Error_Handler();
 8000444:	f000 f952 	bl	80006ec <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE | FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK)
 8000448:	2200      	movs	r2, #0
 800044a:	2109      	movs	r1, #9
 800044c:	481a      	ldr	r0, [pc, #104]	@ (80004b8 <main+0x94>)
 800044e:	f000 ffa9 	bl	80013a4 <HAL_FDCAN_ActivateNotification>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <main+0x38>
  {
    /* Notification Error */
    Error_Handler();
 8000458:	f000 f948 	bl	80006ec <Error_Handler>
  }

  TxHeader.Identifier = 0x11;
 800045c:	4b17      	ldr	r3, [pc, #92]	@ (80004bc <main+0x98>)
 800045e:	2211      	movs	r2, #17
 8000460:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000462:	4b16      	ldr	r3, [pc, #88]	@ (80004bc <main+0x98>)
 8000464:	2200      	movs	r2, #0
 8000466:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000468:	4b14      	ldr	r3, [pc, #80]	@ (80004bc <main+0x98>)
 800046a:	2200      	movs	r2, #0
 800046c:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_12;
 800046e:	4b13      	ldr	r3, [pc, #76]	@ (80004bc <main+0x98>)
 8000470:	2209      	movs	r2, #9
 8000472:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000474:	4b11      	ldr	r3, [pc, #68]	@ (80004bc <main+0x98>)
 8000476:	2200      	movs	r2, #0
 8000478:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800047a:	4b10      	ldr	r3, [pc, #64]	@ (80004bc <main+0x98>)
 800047c:	2200      	movs	r2, #0
 800047e:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_FD_CAN;
 8000480:	4b0e      	ldr	r3, [pc, #56]	@ (80004bc <main+0x98>)
 8000482:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000486:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000488:	4b0c      	ldr	r3, [pc, #48]	@ (80004bc <main+0x98>)
 800048a:	2200      	movs	r2, #0
 800048c:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 800048e:	4b0b      	ldr	r3, [pc, #44]	@ (80004bc <main+0x98>)
 8000490:	2200      	movs	r2, #0
 8000492:	621a      	str	r2, [r3, #32]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  message_counter = 0;
 8000494:	4b0a      	ldr	r3, [pc, #40]	@ (80004c0 <main+0x9c>)
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
	  printf("tick \n");
 800049a:	480a      	ldr	r0, [pc, #40]	@ (80004c4 <main+0xa0>)
 800049c:	f002 fd2e 	bl	8002efc <puts>

	  //fill_level_in_main = HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO1);
	  //printf("M Fill: %d \n", (int)fill_level_in_main);

	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80004a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004a4:	4808      	ldr	r0, [pc, #32]	@ (80004c8 <main+0xa4>)
 80004a6:	f001 fbed 	bl	8001c84 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80004aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004ae:	f000 fb45 	bl	8000b3c <HAL_Delay>
	  message_counter = 0;
 80004b2:	bf00      	nop
 80004b4:	e7ee      	b.n	8000494 <main+0x70>
 80004b6:	bf00      	nop
 80004b8:	20000084 	.word	0x20000084
 80004bc:	200000e8 	.word	0x200000e8
 80004c0:	20000140 	.word	0x20000140
 80004c4:	08003c3c 	.word	0x08003c3c
 80004c8:	48000800 	.word	0x48000800

080004cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b094      	sub	sp, #80	@ 0x50
 80004d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d2:	f107 0318 	add.w	r3, r7, #24
 80004d6:	2238      	movs	r2, #56	@ 0x38
 80004d8:	2100      	movs	r1, #0
 80004da:	4618      	mov	r0, r3
 80004dc:	f002 fdee 	bl	80030bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004ee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80004f2:	f001 fbe1 	bl	8001cb8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004f6:	2302      	movs	r3, #2
 80004f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80004fe:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000500:	2340      	movs	r3, #64	@ 0x40
 8000502:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000504:	2302      	movs	r3, #2
 8000506:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000508:	2302      	movs	r3, #2
 800050a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800050c:	2301      	movs	r3, #1
 800050e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000510:	2308      	movs	r3, #8
 8000512:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000514:	2302      	movs	r3, #2
 8000516:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000518:	2302      	movs	r3, #2
 800051a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800051c:	2302      	movs	r3, #2
 800051e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000520:	f107 0318 	add.w	r3, r7, #24
 8000524:	4618      	mov	r0, r3
 8000526:	f001 fc7b 	bl	8001e20 <HAL_RCC_OscConfig>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000530:	f000 f8dc 	bl	80006ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000534:	230f      	movs	r3, #15
 8000536:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000538:	2303      	movs	r3, #3
 800053a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800053c:	2300      	movs	r3, #0
 800053e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000540:	2300      	movs	r3, #0
 8000542:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	2102      	movs	r1, #2
 800054c:	4618      	mov	r0, r3
 800054e:	f001 ff79 	bl	8002444 <HAL_RCC_ClockConfig>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000558:	f000 f8c8 	bl	80006ec <Error_Handler>
  }
}
 800055c:	bf00      	nop
 800055e:	3750      	adds	r7, #80	@ 0x50
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800056a:	4b38      	ldr	r3, [pc, #224]	@ (800064c <MX_FDCAN1_Init+0xe8>)
 800056c:	4a38      	ldr	r2, [pc, #224]	@ (8000650 <MX_FDCAN1_Init+0xec>)
 800056e:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000570:	4b36      	ldr	r3, [pc, #216]	@ (800064c <MX_FDCAN1_Init+0xe8>)
 8000572:	2200      	movs	r2, #0
 8000574:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000576:	4b35      	ldr	r3, [pc, #212]	@ (800064c <MX_FDCAN1_Init+0xe8>)
 8000578:	2200      	movs	r2, #0
 800057a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_BUS_MONITORING;
 800057c:	4b33      	ldr	r3, [pc, #204]	@ (800064c <MX_FDCAN1_Init+0xe8>)
 800057e:	2202      	movs	r2, #2
 8000580:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000582:	4b32      	ldr	r3, [pc, #200]	@ (800064c <MX_FDCAN1_Init+0xe8>)
 8000584:	2201      	movs	r2, #1
 8000586:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8000588:	4b30      	ldr	r3, [pc, #192]	@ (800064c <MX_FDCAN1_Init+0xe8>)
 800058a:	2201      	movs	r2, #1
 800058c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800058e:	4b2f      	ldr	r3, [pc, #188]	@ (800064c <MX_FDCAN1_Init+0xe8>)
 8000590:	2200      	movs	r2, #0
 8000592:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 8000594:	4b2d      	ldr	r3, [pc, #180]	@ (800064c <MX_FDCAN1_Init+0xe8>)
 8000596:	2204      	movs	r2, #4
 8000598:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800059a:	4b2c      	ldr	r3, [pc, #176]	@ (800064c <MX_FDCAN1_Init+0xe8>)
 800059c:	2201      	movs	r2, #1
 800059e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80005a0:	4b2a      	ldr	r3, [pc, #168]	@ (800064c <MX_FDCAN1_Init+0xe8>)
 80005a2:	220d      	movs	r2, #13
 80005a4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80005a6:	4b29      	ldr	r3, [pc, #164]	@ (800064c <MX_FDCAN1_Init+0xe8>)
 80005a8:	2202      	movs	r2, #2
 80005aa:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80005ac:	4b27      	ldr	r3, [pc, #156]	@ (800064c <MX_FDCAN1_Init+0xe8>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80005b2:	4b26      	ldr	r3, [pc, #152]	@ (800064c <MX_FDCAN1_Init+0xe8>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80005b8:	4b24      	ldr	r3, [pc, #144]	@ (800064c <MX_FDCAN1_Init+0xe8>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80005be:	4b23      	ldr	r3, [pc, #140]	@ (800064c <MX_FDCAN1_Init+0xe8>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 2;
 80005c4:	4b21      	ldr	r3, [pc, #132]	@ (800064c <MX_FDCAN1_Init+0xe8>)
 80005c6:	2202      	movs	r2, #2
 80005c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80005ca:	4b20      	ldr	r3, [pc, #128]	@ (800064c <MX_FDCAN1_Init+0xe8>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80005d0:	4b1e      	ldr	r3, [pc, #120]	@ (800064c <MX_FDCAN1_Init+0xe8>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80005d6:	481d      	ldr	r0, [pc, #116]	@ (800064c <MX_FDCAN1_Init+0xe8>)
 80005d8:	f000 fbe2 	bl	8000da0 <HAL_FDCAN_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80005e2:	f000 f883 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80005e6:	2300      	movs	r3, #0
 80005e8:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80005ee:	2302      	movs	r3, #2
 80005f0:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80005f2:	2301      	movs	r3, #1
 80005f4:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x0000;
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x0100;
 80005fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005fe:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000600:	463b      	mov	r3, r7
 8000602:	4619      	mov	r1, r3
 8000604:	4811      	ldr	r0, [pc, #68]	@ (800064c <MX_FDCAN1_Init+0xe8>)
 8000606:	f000 fd25 	bl	8001054 <HAL_FDCAN_ConfigFilter>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_FDCAN1_Init+0xb0>
  {
    /* Filter configuration Error */
    Error_Handler();
 8000610:	f000 f86c 	bl	80006ec <Error_Handler>
  }

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000614:	2300      	movs	r3, #0
 8000616:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 1;
 8000618:	2301      	movs	r3, #1
 800061a:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800061c:	2302      	movs	r3, #2
 800061e:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 8000620:	2302      	movs	r3, #2
 8000622:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x0700;
 8000624:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000628:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x0780;
 800062a:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 800062e:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	4619      	mov	r1, r3
 8000634:	4805      	ldr	r0, [pc, #20]	@ (800064c <MX_FDCAN1_Init+0xe8>)
 8000636:	f000 fd0d 	bl	8001054 <HAL_FDCAN_ConfigFilter>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_FDCAN1_Init+0xe0>
  {
    /* Filter configuration Error */
    Error_Handler();
 8000640:	f000 f854 	bl	80006ec <Error_Handler>
  }

  /* USER CODE END FDCAN1_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	3718      	adds	r7, #24
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000084 	.word	0x20000084
 8000650:	40006400 	.word	0x40006400

08000654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066a:	4b1e      	ldr	r3, [pc, #120]	@ (80006e4 <MX_GPIO_Init+0x90>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066e:	4a1d      	ldr	r2, [pc, #116]	@ (80006e4 <MX_GPIO_Init+0x90>)
 8000670:	f043 0304 	orr.w	r3, r3, #4
 8000674:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000676:	4b1b      	ldr	r3, [pc, #108]	@ (80006e4 <MX_GPIO_Init+0x90>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067a:	f003 0304 	and.w	r3, r3, #4
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b18      	ldr	r3, [pc, #96]	@ (80006e4 <MX_GPIO_Init+0x90>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000686:	4a17      	ldr	r2, [pc, #92]	@ (80006e4 <MX_GPIO_Init+0x90>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800068e:	4b15      	ldr	r3, [pc, #84]	@ (80006e4 <MX_GPIO_Init+0x90>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <MX_GPIO_Init+0x90>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069e:	4a11      	ldr	r2, [pc, #68]	@ (80006e4 <MX_GPIO_Init+0x90>)
 80006a0:	f043 0302 	orr.w	r3, r3, #2
 80006a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006a6:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <MX_GPIO_Init+0x90>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006aa:	f003 0302 	and.w	r3, r3, #2
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006b8:	480b      	ldr	r0, [pc, #44]	@ (80006e8 <MX_GPIO_Init+0x94>)
 80006ba:	f001 facb 	bl	8001c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c4:	2301      	movs	r3, #1
 80006c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	4619      	mov	r1, r3
 80006d6:	4804      	ldr	r0, [pc, #16]	@ (80006e8 <MX_GPIO_Init+0x94>)
 80006d8:	f001 f93a 	bl	8001950 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006dc:	bf00      	nop
 80006de:	3720      	adds	r7, #32
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40021000 	.word	0x40021000
 80006e8:	48000800 	.word	0x48000800

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <Error_Handler+0x8>

080006f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fe:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <HAL_MspInit+0x44>)
 8000700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000702:	4a0e      	ldr	r2, [pc, #56]	@ (800073c <HAL_MspInit+0x44>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6613      	str	r3, [r2, #96]	@ 0x60
 800070a:	4b0c      	ldr	r3, [pc, #48]	@ (800073c <HAL_MspInit+0x44>)
 800070c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	4b09      	ldr	r3, [pc, #36]	@ (800073c <HAL_MspInit+0x44>)
 8000718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800071a:	4a08      	ldr	r2, [pc, #32]	@ (800073c <HAL_MspInit+0x44>)
 800071c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000720:	6593      	str	r3, [r2, #88]	@ 0x58
 8000722:	4b06      	ldr	r3, [pc, #24]	@ (800073c <HAL_MspInit+0x44>)
 8000724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800072e:	f001 fb67 	bl	8001e00 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40021000 	.word	0x40021000

08000740 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b09e      	sub	sp, #120	@ 0x78
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	2254      	movs	r2, #84	@ 0x54
 800075e:	2100      	movs	r1, #0
 8000760:	4618      	mov	r0, r3
 8000762:	f002 fcab 	bl	80030bc <memset>
  if(hfdcan->Instance==FDCAN1)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a28      	ldr	r2, [pc, #160]	@ (800080c <HAL_FDCAN_MspInit+0xcc>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d149      	bne.n	8000804 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000770:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000774:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000776:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800077a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800077c:	f107 0310 	add.w	r3, r7, #16
 8000780:	4618      	mov	r0, r3
 8000782:	f002 f843 	bl	800280c <HAL_RCCEx_PeriphCLKConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800078c:	f7ff ffae 	bl	80006ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000790:	4b1f      	ldr	r3, [pc, #124]	@ (8000810 <HAL_FDCAN_MspInit+0xd0>)
 8000792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000794:	4a1e      	ldr	r2, [pc, #120]	@ (8000810 <HAL_FDCAN_MspInit+0xd0>)
 8000796:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800079a:	6593      	str	r3, [r2, #88]	@ 0x58
 800079c:	4b1c      	ldr	r3, [pc, #112]	@ (8000810 <HAL_FDCAN_MspInit+0xd0>)
 800079e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a8:	4b19      	ldr	r3, [pc, #100]	@ (8000810 <HAL_FDCAN_MspInit+0xd0>)
 80007aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ac:	4a18      	ldr	r2, [pc, #96]	@ (8000810 <HAL_FDCAN_MspInit+0xd0>)
 80007ae:	f043 0301 	orr.w	r3, r3, #1
 80007b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007b4:	4b16      	ldr	r3, [pc, #88]	@ (8000810 <HAL_FDCAN_MspInit+0xd0>)
 80007b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b8:	f003 0301 	and.w	r3, r3, #1
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007c0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80007c4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80007d2:	2309      	movs	r3, #9
 80007d4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80007da:	4619      	mov	r1, r3
 80007dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007e0:	f001 f8b6 	bl	8001950 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2100      	movs	r1, #0
 80007e8:	2015      	movs	r0, #21
 80007ea:	f000 faa4 	bl	8000d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80007ee:	2015      	movs	r0, #21
 80007f0:	f000 fabb 	bl	8000d6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2100      	movs	r1, #0
 80007f8:	2016      	movs	r0, #22
 80007fa:	f000 fa9c 	bl	8000d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80007fe:	2016      	movs	r0, #22
 8000800:	f000 fab3 	bl	8000d6a <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000804:	bf00      	nop
 8000806:	3778      	adds	r7, #120	@ 0x78
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40006400 	.word	0x40006400
 8000810:	40021000 	.word	0x40021000

08000814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <NMI_Handler+0x4>

0800081c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <HardFault_Handler+0x4>

08000824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <MemManage_Handler+0x4>

0800082c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <BusFault_Handler+0x4>

08000834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <UsageFault_Handler+0x4>

0800083c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr

08000866 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800086a:	f000 f949 	bl	8000b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000878:	4802      	ldr	r0, [pc, #8]	@ (8000884 <FDCAN1_IT0_IRQHandler+0x10>)
 800087a:	f000 fe79 	bl	8001570 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000084 	.word	0x20000084

08000888 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800088c:	4802      	ldr	r0, [pc, #8]	@ (8000898 <FDCAN1_IT1_IRQHandler+0x10>)
 800088e:	f000 fe6f 	bl	8001570 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000084 	.word	0x20000084

0800089c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	e00a      	b.n	80008c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008ae:	f3af 8000 	nop.w
 80008b2:	4601      	mov	r1, r0
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	1c5a      	adds	r2, r3, #1
 80008b8:	60ba      	str	r2, [r7, #8]
 80008ba:	b2ca      	uxtb	r2, r1
 80008bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	3301      	adds	r3, #1
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	697a      	ldr	r2, [r7, #20]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	dbf0      	blt.n	80008ae <_read+0x12>
  }

  return len;
 80008cc:	687b      	ldr	r3, [r7, #4]
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b086      	sub	sp, #24
 80008da:	af00      	add	r7, sp, #0
 80008dc:	60f8      	str	r0, [r7, #12]
 80008de:	60b9      	str	r1, [r7, #8]
 80008e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	e009      	b.n	80008fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	1c5a      	adds	r2, r3, #1
 80008ec:	60ba      	str	r2, [r7, #8]
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff fd89 	bl	8000408 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	3301      	adds	r3, #1
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	697a      	ldr	r2, [r7, #20]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	429a      	cmp	r2, r3
 8000902:	dbf1      	blt.n	80008e8 <_write+0x12>
  }
  return len;
 8000904:	687b      	ldr	r3, [r7, #4]
}
 8000906:	4618      	mov	r0, r3
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <_close>:

int _close(int file)
{
 800090e:	b480      	push	{r7}
 8000910:	b083      	sub	sp, #12
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000916:	f04f 33ff 	mov.w	r3, #4294967295
}
 800091a:	4618      	mov	r0, r3
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000926:	b480      	push	{r7}
 8000928:	b083      	sub	sp, #12
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
 800092e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000936:	605a      	str	r2, [r3, #4]
  return 0;
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <_isatty>:

int _isatty(int file)
{
 8000946:	b480      	push	{r7}
 8000948:	b083      	sub	sp, #12
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800094e:	2301      	movs	r3, #1
}
 8000950:	4618      	mov	r0, r3
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	3714      	adds	r7, #20
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
	...

08000978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000980:	4a14      	ldr	r2, [pc, #80]	@ (80009d4 <_sbrk+0x5c>)
 8000982:	4b15      	ldr	r3, [pc, #84]	@ (80009d8 <_sbrk+0x60>)
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800098c:	4b13      	ldr	r3, [pc, #76]	@ (80009dc <_sbrk+0x64>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d102      	bne.n	800099a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000994:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <_sbrk+0x64>)
 8000996:	4a12      	ldr	r2, [pc, #72]	@ (80009e0 <_sbrk+0x68>)
 8000998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800099a:	4b10      	ldr	r3, [pc, #64]	@ (80009dc <_sbrk+0x64>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4413      	add	r3, r2
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d207      	bcs.n	80009b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009a8:	f002 fbd6 	bl	8003158 <__errno>
 80009ac:	4603      	mov	r3, r0
 80009ae:	220c      	movs	r2, #12
 80009b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
 80009b6:	e009      	b.n	80009cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009b8:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <_sbrk+0x64>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009be:	4b07      	ldr	r3, [pc, #28]	@ (80009dc <_sbrk+0x64>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4413      	add	r3, r2
 80009c6:	4a05      	ldr	r2, [pc, #20]	@ (80009dc <_sbrk+0x64>)
 80009c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ca:	68fb      	ldr	r3, [r7, #12]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3718      	adds	r7, #24
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20020000 	.word	0x20020000
 80009d8:	00000400 	.word	0x00000400
 80009dc:	20000144 	.word	0x20000144
 80009e0:	20000298 	.word	0x20000298

080009e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009e8:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <SystemInit+0x20>)
 80009ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ee:	4a05      	ldr	r2, [pc, #20]	@ (8000a04 <SystemInit+0x20>)
 80009f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a08:	480d      	ldr	r0, [pc, #52]	@ (8000a40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a0a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a0c:	f7ff ffea 	bl	80009e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a10:	480c      	ldr	r0, [pc, #48]	@ (8000a44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a12:	490d      	ldr	r1, [pc, #52]	@ (8000a48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a14:	4a0d      	ldr	r2, [pc, #52]	@ (8000a4c <LoopForever+0xe>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a18:	e002      	b.n	8000a20 <LoopCopyDataInit>

08000a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1e:	3304      	adds	r3, #4

08000a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a24:	d3f9      	bcc.n	8000a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a26:	4a0a      	ldr	r2, [pc, #40]	@ (8000a50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a28:	4c0a      	ldr	r4, [pc, #40]	@ (8000a54 <LoopForever+0x16>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a2c:	e001      	b.n	8000a32 <LoopFillZerobss>

08000a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a30:	3204      	adds	r2, #4

08000a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a34:	d3fb      	bcc.n	8000a2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a36:	f002 fb95 	bl	8003164 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a3a:	f7ff fcf3 	bl	8000424 <main>

08000a3e <LoopForever>:

LoopForever:
    b LoopForever
 8000a3e:	e7fe      	b.n	8000a3e <LoopForever>
  ldr   r0, =_estack
 8000a40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a48:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a4c:	08003ca8 	.word	0x08003ca8
  ldr r2, =_sbss
 8000a50:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a54:	20000298 	.word	0x20000298

08000a58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a58:	e7fe      	b.n	8000a58 <ADC1_2_IRQHandler>

08000a5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a60:	2300      	movs	r3, #0
 8000a62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a64:	2003      	movs	r0, #3
 8000a66:	f000 f95b 	bl	8000d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f000 f80e 	bl	8000a8c <HAL_InitTick>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d002      	beq.n	8000a7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	71fb      	strb	r3, [r7, #7]
 8000a7a:	e001      	b.n	8000a80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a7c:	f7ff fe3c 	bl	80006f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a80:	79fb      	ldrb	r3, [r7, #7]

}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a94:	2300      	movs	r3, #0
 8000a96:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a98:	4b16      	ldr	r3, [pc, #88]	@ (8000af4 <HAL_InitTick+0x68>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d022      	beq.n	8000ae6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000aa0:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <HAL_InitTick+0x6c>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b13      	ldr	r3, [pc, #76]	@ (8000af4 <HAL_InitTick+0x68>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000aac:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 f966 	bl	8000d86 <HAL_SYSTICK_Config>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d10f      	bne.n	8000ae0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2b0f      	cmp	r3, #15
 8000ac4:	d809      	bhi.n	8000ada <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	6879      	ldr	r1, [r7, #4]
 8000aca:	f04f 30ff 	mov.w	r0, #4294967295
 8000ace:	f000 f932 	bl	8000d36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8000afc <HAL_InitTick+0x70>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6013      	str	r3, [r2, #0]
 8000ad8:	e007      	b.n	8000aea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	73fb      	strb	r3, [r7, #15]
 8000ade:	e004      	b.n	8000aea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	73fb      	strb	r3, [r7, #15]
 8000ae4:	e001      	b.n	8000aea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000008 	.word	0x20000008
 8000af8:	20000000 	.word	0x20000000
 8000afc:	20000004 	.word	0x20000004

08000b00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b04:	4b05      	ldr	r3, [pc, #20]	@ (8000b1c <HAL_IncTick+0x1c>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b05      	ldr	r3, [pc, #20]	@ (8000b20 <HAL_IncTick+0x20>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	4a03      	ldr	r2, [pc, #12]	@ (8000b1c <HAL_IncTick+0x1c>)
 8000b10:	6013      	str	r3, [r2, #0]
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	20000148 	.word	0x20000148
 8000b20:	20000008 	.word	0x20000008

08000b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return uwTick;
 8000b28:	4b03      	ldr	r3, [pc, #12]	@ (8000b38 <HAL_GetTick+0x14>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000148 	.word	0x20000148

08000b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b44:	f7ff ffee 	bl	8000b24 <HAL_GetTick>
 8000b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b54:	d004      	beq.n	8000b60 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b56:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <HAL_Delay+0x40>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b60:	bf00      	nop
 8000b62:	f7ff ffdf 	bl	8000b24 <HAL_GetTick>
 8000b66:	4602      	mov	r2, r0
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	1ad3      	subs	r3, r2, r3
 8000b6c:	68fa      	ldr	r2, [r7, #12]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d8f7      	bhi.n	8000b62 <HAL_Delay+0x26>
  {
  }
}
 8000b72:	bf00      	nop
 8000b74:	bf00      	nop
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000008 	.word	0x20000008

08000b80 <__NVIC_SetPriorityGrouping>:
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b90:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb2:	4a04      	ldr	r2, [pc, #16]	@ (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	60d3      	str	r3, [r2, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_GetPriorityGrouping>:
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bcc:	4b04      	ldr	r3, [pc, #16]	@ (8000be0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	f003 0307 	and.w	r3, r3, #7
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_EnableIRQ>:
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	db0b      	blt.n	8000c0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	f003 021f 	and.w	r2, r3, #31
 8000bfc:	4907      	ldr	r1, [pc, #28]	@ (8000c1c <__NVIC_EnableIRQ+0x38>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	095b      	lsrs	r3, r3, #5
 8000c04:	2001      	movs	r0, #1
 8000c06:	fa00 f202 	lsl.w	r2, r0, r2
 8000c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000e100 	.word	0xe000e100

08000c20 <__NVIC_SetPriority>:
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	6039      	str	r1, [r7, #0]
 8000c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db0a      	blt.n	8000c4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	490c      	ldr	r1, [pc, #48]	@ (8000c6c <__NVIC_SetPriority+0x4c>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	0112      	lsls	r2, r2, #4
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	440b      	add	r3, r1
 8000c44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000c48:	e00a      	b.n	8000c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4908      	ldr	r1, [pc, #32]	@ (8000c70 <__NVIC_SetPriority+0x50>)
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	f003 030f 	and.w	r3, r3, #15
 8000c56:	3b04      	subs	r3, #4
 8000c58:	0112      	lsls	r2, r2, #4
 8000c5a:	b2d2      	uxtb	r2, r2
 8000c5c:	440b      	add	r3, r1
 8000c5e:	761a      	strb	r2, [r3, #24]
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000e100 	.word	0xe000e100
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <NVIC_EncodePriority>:
{
 8000c74:	b480      	push	{r7}
 8000c76:	b089      	sub	sp, #36	@ 0x24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	f1c3 0307 	rsb	r3, r3, #7
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	bf28      	it	cs
 8000c92:	2304      	movcs	r3, #4
 8000c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3304      	adds	r3, #4
 8000c9a:	2b06      	cmp	r3, #6
 8000c9c:	d902      	bls.n	8000ca4 <NVIC_EncodePriority+0x30>
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3b03      	subs	r3, #3
 8000ca2:	e000      	b.n	8000ca6 <NVIC_EncodePriority+0x32>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43da      	mvns	r2, r3
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc6:	43d9      	mvns	r1, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	4313      	orrs	r3, r2
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3724      	adds	r7, #36	@ 0x24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <SysTick_Config>:
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cec:	d301      	bcc.n	8000cf2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e00f      	b.n	8000d12 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d1c <SysTick_Config+0x40>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cfa:	210f      	movs	r1, #15
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	f7ff ff8e 	bl	8000c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d04:	4b05      	ldr	r3, [pc, #20]	@ (8000d1c <SysTick_Config+0x40>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d0a:	4b04      	ldr	r3, [pc, #16]	@ (8000d1c <SysTick_Config+0x40>)
 8000d0c:	2207      	movs	r2, #7
 8000d0e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	e000e010 	.word	0xe000e010

08000d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff ff29 	bl	8000b80 <__NVIC_SetPriorityGrouping>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b086      	sub	sp, #24
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	60b9      	str	r1, [r7, #8]
 8000d40:	607a      	str	r2, [r7, #4]
 8000d42:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d44:	f7ff ff40 	bl	8000bc8 <__NVIC_GetPriorityGrouping>
 8000d48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	68b9      	ldr	r1, [r7, #8]
 8000d4e:	6978      	ldr	r0, [r7, #20]
 8000d50:	f7ff ff90 	bl	8000c74 <NVIC_EncodePriority>
 8000d54:	4602      	mov	r2, r0
 8000d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5a:	4611      	mov	r1, r2
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ff5f 	bl	8000c20 <__NVIC_SetPriority>
}
 8000d62:	bf00      	nop
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ff33 	bl	8000be4 <__NVIC_EnableIRQ>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffa4 	bl	8000cdc <SysTick_Config>
 8000d94:	4603      	mov	r3, r0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d101      	bne.n	8000db2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e147      	b.n	8001042 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d106      	bne.n	8000dcc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff fcba 	bl	8000740 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	699a      	ldr	r2, [r3, #24]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f022 0210 	bic.w	r2, r2, #16
 8000dda:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ddc:	f7ff fea2 	bl	8000b24 <HAL_GetTick>
 8000de0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000de2:	e012      	b.n	8000e0a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000de4:	f7ff fe9e 	bl	8000b24 <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	2b0a      	cmp	r3, #10
 8000df0:	d90b      	bls.n	8000e0a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000df6:	f043 0201 	orr.w	r2, r3, #1
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2203      	movs	r2, #3
 8000e02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e11b      	b.n	8001042 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	f003 0308 	and.w	r3, r3, #8
 8000e14:	2b08      	cmp	r3, #8
 8000e16:	d0e5      	beq.n	8000de4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	699a      	ldr	r2, [r3, #24]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f042 0201 	orr.w	r2, r2, #1
 8000e26:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e28:	f7ff fe7c 	bl	8000b24 <HAL_GetTick>
 8000e2c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000e2e:	e012      	b.n	8000e56 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000e30:	f7ff fe78 	bl	8000b24 <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	2b0a      	cmp	r3, #10
 8000e3c:	d90b      	bls.n	8000e56 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e42:	f043 0201 	orr.w	r2, r3, #1
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e0f5      	b.n	8001042 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d0e5      	beq.n	8000e30 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	699a      	ldr	r2, [r3, #24]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f042 0202 	orr.w	r2, r2, #2
 8000e72:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a74      	ldr	r2, [pc, #464]	@ (800104c <HAL_FDCAN_Init+0x2ac>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d103      	bne.n	8000e86 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000e7e:	4a74      	ldr	r2, [pc, #464]	@ (8001050 <HAL_FDCAN_Init+0x2b0>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	7c1b      	ldrb	r3, [r3, #16]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d108      	bne.n	8000ea0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	699a      	ldr	r2, [r3, #24]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000e9c:	619a      	str	r2, [r3, #24]
 8000e9e:	e007      	b.n	8000eb0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	699a      	ldr	r2, [r3, #24]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000eae:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	7c5b      	ldrb	r3, [r3, #17]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d108      	bne.n	8000eca <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	699a      	ldr	r2, [r3, #24]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000ec6:	619a      	str	r2, [r3, #24]
 8000ec8:	e007      	b.n	8000eda <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	699a      	ldr	r2, [r3, #24]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000ed8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	7c9b      	ldrb	r3, [r3, #18]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d108      	bne.n	8000ef4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	699a      	ldr	r2, [r3, #24]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000ef0:	619a      	str	r2, [r3, #24]
 8000ef2:	e007      	b.n	8000f04 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	699a      	ldr	r2, [r3, #24]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000f02:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	699b      	ldr	r3, [r3, #24]
 8000f0a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	689a      	ldr	r2, [r3, #8]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	430a      	orrs	r2, r1
 8000f18:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	699a      	ldr	r2, [r3, #24]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8000f28:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	691a      	ldr	r2, [r3, #16]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f022 0210 	bic.w	r2, r2, #16
 8000f38:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d108      	bne.n	8000f54 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	699a      	ldr	r2, [r3, #24]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f042 0204 	orr.w	r2, r2, #4
 8000f50:	619a      	str	r2, [r3, #24]
 8000f52:	e02c      	b.n	8000fae <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d028      	beq.n	8000fae <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d01c      	beq.n	8000f9e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	699a      	ldr	r2, [r3, #24]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000f72:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	691a      	ldr	r2, [r3, #16]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f042 0210 	orr.w	r2, r2, #16
 8000f82:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	2b03      	cmp	r3, #3
 8000f8a:	d110      	bne.n	8000fae <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	699a      	ldr	r2, [r3, #24]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f042 0220 	orr.w	r2, r2, #32
 8000f9a:	619a      	str	r2, [r3, #24]
 8000f9c:	e007      	b.n	8000fae <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	699a      	ldr	r2, [r3, #24]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f042 0220 	orr.w	r2, r2, #32
 8000fac:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fbe:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a1b      	ldr	r3, [r3, #32]
 8000fc4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000fc6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000fd6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fd8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000fe2:	d115      	bne.n	8001010 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fe8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000ff2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000ffc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001004:	3b01      	subs	r3, #1
 8001006:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800100c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800100e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	430a      	orrs	r2, r1
 8001022:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 fc26 	bl	8001878 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2201      	movs	r2, #1
 800103c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40006400 	.word	0x40006400
 8001050:	40006500 	.word	0x40006500

08001054 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001054:	b480      	push	{r7}
 8001056:	b087      	sub	sp, #28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001064:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001066:	7dfb      	ldrb	r3, [r7, #23]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d002      	beq.n	8001072 <HAL_FDCAN_ConfigFilter+0x1e>
 800106c:	7dfb      	ldrb	r3, [r7, #23]
 800106e:	2b02      	cmp	r3, #2
 8001070:	d13d      	bne.n	80010ee <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d119      	bne.n	80010ae <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001086:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800108e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	e01d      	b.n	80010ea <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	075a      	lsls	r2, r3, #29
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	691b      	ldr	r3, [r3, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	079a      	lsls	r2, r3, #30
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	4413      	add	r3, r2
 80010d6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	3304      	adds	r3, #4
 80010e2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80010ea:	2300      	movs	r3, #0
 80010ec:	e006      	b.n	80010fc <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010f2:	f043 0202 	orr.w	r2, r3, #2
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
  }
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	371c      	adds	r7, #28
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b01      	cmp	r3, #1
 800111a:	d110      	bne.n	800113e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2202      	movs	r2, #2
 8001120:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	699a      	ldr	r2, [r3, #24]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f022 0201 	bic.w	r2, r2, #1
 8001132:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800113a:	2300      	movs	r3, #0
 800113c:	e006      	b.n	800114c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001142:	f043 0204 	orr.w	r2, r3, #4
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
  }
}
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001158:	b480      	push	{r7}
 800115a:	b08b      	sub	sp, #44	@ 0x2c
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
 8001164:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001170:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001172:	7efb      	ldrb	r3, [r7, #27]
 8001174:	2b02      	cmp	r3, #2
 8001176:	f040 80e8 	bne.w	800134a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	2b40      	cmp	r3, #64	@ 0x40
 800117e:	d137      	bne.n	80011f0 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001188:	f003 030f 	and.w	r3, r3, #15
 800118c:	2b00      	cmp	r3, #0
 800118e:	d107      	bne.n	80011a0 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001194:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e0db      	b.n	8001358 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011a8:	0e1b      	lsrs	r3, r3, #24
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d10a      	bne.n	80011c8 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011ba:	0a5b      	lsrs	r3, r3, #9
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d101      	bne.n	80011c8 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80011c4:	2301      	movs	r3, #1
 80011c6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	f003 0303 	and.w	r3, r3, #3
 80011d6:	69fa      	ldr	r2, [r7, #28]
 80011d8:	4413      	add	r3, r2
 80011da:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80011e0:	69fa      	ldr	r2, [r7, #28]
 80011e2:	4613      	mov	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	4413      	add	r3, r2
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	440b      	add	r3, r1
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80011ee:	e036      	b.n	800125e <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80011f8:	f003 030f 	and.w	r3, r3, #15
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d107      	bne.n	8001210 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001204:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e0a3      	b.n	8001358 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001218:	0e1b      	lsrs	r3, r3, #24
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	2b01      	cmp	r3, #1
 8001220:	d10a      	bne.n	8001238 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800122a:	0a1b      	lsrs	r3, r3, #8
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	2b01      	cmp	r3, #1
 8001232:	d101      	bne.n	8001238 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001234:	2301      	movs	r3, #1
 8001236:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001240:	0a1b      	lsrs	r3, r3, #8
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	69fa      	ldr	r2, [r7, #28]
 8001248:	4413      	add	r3, r2
 800124a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001250:	69fa      	ldr	r2, [r7, #28]
 8001252:	4613      	mov	r3, r2
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	4413      	add	r3, r2
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	440b      	add	r3, r1
 800125c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800125e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d107      	bne.n	8001282 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	0c9b      	lsrs	r3, r3, #18
 8001278:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	e005      	b.n	800128e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800128e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800129a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80012a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a8:	3304      	adds	r3, #4
 80012aa:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80012ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80012b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	0c1b      	lsrs	r3, r3, #16
 80012bc:	f003 020f 	and.w	r2, r3, #15
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80012c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80012d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80012dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	0e1b      	lsrs	r3, r3, #24
 80012e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80012ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	0fda      	lsrs	r2, r3, #31
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80012f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f6:	3304      	adds	r3, #4
 80012f8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80012fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012fc:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80012fe:	2300      	movs	r3, #0
 8001300:	623b      	str	r3, [r7, #32]
 8001302:	e00a      	b.n	800131a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001304:	697a      	ldr	r2, [r7, #20]
 8001306:	6a3b      	ldr	r3, [r7, #32]
 8001308:	441a      	add	r2, r3
 800130a:	6839      	ldr	r1, [r7, #0]
 800130c:	6a3b      	ldr	r3, [r7, #32]
 800130e:	440b      	add	r3, r1
 8001310:	7812      	ldrb	r2, [r2, #0]
 8001312:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001314:	6a3b      	ldr	r3, [r7, #32]
 8001316:	3301      	adds	r3, #1
 8001318:	623b      	str	r3, [r7, #32]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	4a11      	ldr	r2, [pc, #68]	@ (8001364 <HAL_FDCAN_GetRxMessage+0x20c>)
 8001320:	5cd3      	ldrb	r3, [r2, r3]
 8001322:	461a      	mov	r2, r3
 8001324:	6a3b      	ldr	r3, [r7, #32]
 8001326:	4293      	cmp	r3, r2
 8001328:	d3ec      	bcc.n	8001304 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	2b40      	cmp	r3, #64	@ 0x40
 800132e:	d105      	bne.n	800133c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	69fa      	ldr	r2, [r7, #28]
 8001336:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800133a:	e004      	b.n	8001346 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	69fa      	ldr	r2, [r7, #28]
 8001342:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	e006      	b.n	8001358 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800134e:	f043 0208 	orr.w	r2, r3, #8
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
  }
}
 8001358:	4618      	mov	r0, r3
 800135a:	372c      	adds	r7, #44	@ 0x2c
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	08003c54 	.word	0x08003c54

08001368 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(const FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	2b40      	cmp	r3, #64	@ 0x40
 8001376:	d107      	bne.n	8001388 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001380:	f003 030f 	and.w	r3, r3, #15
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	e006      	b.n	8001396 <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001390:	f003 030f 	and.w	r3, r3, #15
 8001394:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 8001396:	68fb      	ldr	r3, [r7, #12]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b087      	sub	sp, #28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80013b6:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80013b8:	7dfb      	ldrb	r3, [r7, #23]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d003      	beq.n	80013c6 <HAL_FDCAN_ActivateNotification+0x22>
 80013be:	7dfb      	ldrb	r3, [r7, #23]
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	f040 80c8 	bne.w	8001556 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013cc:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	f003 0307 	and.w	r3, r3, #7
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d004      	beq.n	80013e2 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d03b      	beq.n	800145a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d004      	beq.n	80013f6 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d031      	beq.n	800145a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d004      	beq.n	800140a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	f003 0304 	and.w	r3, r3, #4
 8001406:	2b00      	cmp	r3, #0
 8001408:	d027      	beq.n	800145a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001410:	2b00      	cmp	r3, #0
 8001412:	d004      	beq.n	800141e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	2b00      	cmp	r3, #0
 800141c:	d01d      	beq.n	800145a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001424:	2b00      	cmp	r3, #0
 8001426:	d004      	beq.n	8001432 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	f003 0310 	and.w	r3, r3, #16
 800142e:	2b00      	cmp	r3, #0
 8001430:	d013      	beq.n	800145a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001438:	2b00      	cmp	r3, #0
 800143a:	d004      	beq.n	8001446 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	f003 0320 	and.w	r3, r3, #32
 8001442:	2b00      	cmp	r3, #0
 8001444:	d009      	beq.n	800145a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800144c:	2b00      	cmp	r3, #0
 800144e:	d00c      	beq.n	800146a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001456:	2b00      	cmp	r3, #0
 8001458:	d107      	bne.n	800146a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f042 0201 	orr.w	r2, r2, #1
 8001468:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	2b00      	cmp	r3, #0
 8001472:	d004      	beq.n	800147e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	d13b      	bne.n	80014f6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001484:	2b00      	cmp	r3, #0
 8001486:	d004      	beq.n	8001492 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d131      	bne.n	80014f6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001498:	2b00      	cmp	r3, #0
 800149a:	d004      	beq.n	80014a6 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d127      	bne.n	80014f6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d004      	beq.n	80014ba <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d11d      	bne.n	80014f6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d004      	beq.n	80014ce <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	f003 0310 	and.w	r3, r3, #16
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d113      	bne.n	80014f6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d004      	beq.n	80014e2 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	f003 0320 	and.w	r3, r3, #32
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d109      	bne.n	80014f6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d00c      	beq.n	8001506 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d007      	beq.n	8001506 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f042 0202 	orr.w	r2, r2, #2
 8001504:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800150c:	2b00      	cmp	r3, #0
 800150e:	d009      	beq.n	8001524 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	430a      	orrs	r2, r1
 8001520:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800152a:	2b00      	cmp	r3, #0
 800152c:	d009      	beq.n	8001542 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	430a      	orrs	r2, r1
 800153e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	68ba      	ldr	r2, [r7, #8]
 800154e:	430a      	orrs	r2, r1
 8001550:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001552:	2300      	movs	r3, #0
 8001554:	e006      	b.n	8001564 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800155a:	f043 0202 	orr.w	r2, r3, #2
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
  }
}
 8001564:	4618      	mov	r0, r3
 8001566:	371c      	adds	r7, #28
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08c      	sub	sp, #48	@ 0x30
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800157e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001582:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800158a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800158c:	4013      	ands	r3, r2
 800158e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015a4:	4013      	ands	r3, r2
 80015a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80015b2:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015bc:	4013      	ands	r3, r2
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c6:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80015ca:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015d2:	6a3a      	ldr	r2, [r7, #32]
 80015d4:	4013      	ands	r3, r2
 80015d6:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015de:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80015e2:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ea:	69fa      	ldr	r2, [r7, #28]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015f6:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015fe:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00b      	beq.n	8001622 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001610:	2b00      	cmp	r3, #0
 8001612:	d006      	beq.n	8001622 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2240      	movs	r2, #64	@ 0x40
 800161a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 f90b 	bl	8001838 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001628:	2b00      	cmp	r3, #0
 800162a:	d019      	beq.n	8001660 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001632:	2b00      	cmp	r3, #0
 8001634:	d014      	beq.n	8001660 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800163e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	4013      	ands	r3, r2
 800164c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001656:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001658:	6939      	ldr	r1, [r7, #16]
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 f8cd 	bl	80017fa <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001662:	2b00      	cmp	r3, #0
 8001664:	d007      	beq.n	8001676 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800166c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800166e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 f8a2 	bl	80017ba <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001678:	2b00      	cmp	r3, #0
 800167a:	d007      	beq.n	800168c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001682:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001684:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7fe fe42 	bl	8000310 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800168c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168e:	2b00      	cmp	r3, #0
 8001690:	d007      	beq.n	80016a2 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001698:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800169a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7fe fe75 	bl	800038c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d00c      	beq.n	80016c6 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d007      	beq.n	80016c6 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016be:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 f885 	bl	80017d0 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d018      	beq.n	8001702 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d013      	beq.n	8001702 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80016e2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	4013      	ands	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2280      	movs	r2, #128	@ 0x80
 80016f8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80016fa:	68f9      	ldr	r1, [r7, #12]
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 f871 	bl	80017e4 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d00c      	beq.n	8001726 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d007      	beq.n	8001726 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800171e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 f875 	bl	8001810 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00c      	beq.n	800174a <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d007      	beq.n	800174a <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001742:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 f86d 	bl	8001824 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00f      	beq.n	8001774 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00a      	beq.n	8001774 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001766:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800176c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d007      	beq.n	800178a <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	69fa      	ldr	r2, [r7, #28]
 8001780:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001782:	69f9      	ldr	r1, [r7, #28]
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 f86b 	bl	8001860 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800178a:	6a3b      	ldr	r3, [r7, #32]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d009      	beq.n	80017a4 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6a3a      	ldr	r2, [r7, #32]
 8001796:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800179c:	6a3b      	ldr	r3, [r7, #32]
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d002      	beq.n	80017b2 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 f84d 	bl	800184c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80017b2:	bf00      	nop
 80017b4:	3730      	adds	r7, #48	@ 0x30
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
	...

08001878 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001880:	4b30      	ldr	r3, [pc, #192]	@ (8001944 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001882:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a2f      	ldr	r2, [pc, #188]	@ (8001948 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d103      	bne.n	8001896 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001894:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a2c      	ldr	r2, [pc, #176]	@ (800194c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d103      	bne.n	80018a8 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 80018a6:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018b6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018be:	041a      	lsls	r2, r3, #16
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018dc:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018e4:	061a      	lsls	r2, r3, #24
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	e005      	b.n	800192a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	3304      	adds	r3, #4
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	429a      	cmp	r2, r3
 8001934:	d3f3      	bcc.n	800191e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8001936:	bf00      	nop
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	4000a400 	.word	0x4000a400
 8001948:	40006800 	.word	0x40006800
 800194c:	40006c00 	.word	0x40006c00

08001950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001950:	b480      	push	{r7}
 8001952:	b087      	sub	sp, #28
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800195e:	e15a      	b.n	8001c16 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	2101      	movs	r1, #1
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	fa01 f303 	lsl.w	r3, r1, r3
 800196c:	4013      	ands	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2b00      	cmp	r3, #0
 8001974:	f000 814c 	beq.w	8001c10 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0303 	and.w	r3, r3, #3
 8001980:	2b01      	cmp	r3, #1
 8001982:	d005      	beq.n	8001990 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800198c:	2b02      	cmp	r3, #2
 800198e:	d130      	bne.n	80019f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	2203      	movs	r2, #3
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	68da      	ldr	r2, [r3, #12]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019c6:	2201      	movs	r2, #1
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43db      	mvns	r3, r3
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4013      	ands	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	091b      	lsrs	r3, r3, #4
 80019dc:	f003 0201 	and.w	r2, r3, #1
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	d017      	beq.n	8001a2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	2203      	movs	r2, #3
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	4013      	ands	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d123      	bne.n	8001a82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	08da      	lsrs	r2, r3, #3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3208      	adds	r2, #8
 8001a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	220f      	movs	r2, #15
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	691a      	ldr	r2, [r3, #16]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	08da      	lsrs	r2, r3, #3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3208      	adds	r2, #8
 8001a7c:	6939      	ldr	r1, [r7, #16]
 8001a7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4013      	ands	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 0203 	and.w	r2, r3, #3
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 80a6 	beq.w	8001c10 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac4:	4b5b      	ldr	r3, [pc, #364]	@ (8001c34 <HAL_GPIO_Init+0x2e4>)
 8001ac6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ac8:	4a5a      	ldr	r2, [pc, #360]	@ (8001c34 <HAL_GPIO_Init+0x2e4>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ad0:	4b58      	ldr	r3, [pc, #352]	@ (8001c34 <HAL_GPIO_Init+0x2e4>)
 8001ad2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001adc:	4a56      	ldr	r2, [pc, #344]	@ (8001c38 <HAL_GPIO_Init+0x2e8>)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	089b      	lsrs	r3, r3, #2
 8001ae2:	3302      	adds	r3, #2
 8001ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	220f      	movs	r2, #15
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b06:	d01f      	beq.n	8001b48 <HAL_GPIO_Init+0x1f8>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a4c      	ldr	r2, [pc, #304]	@ (8001c3c <HAL_GPIO_Init+0x2ec>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d019      	beq.n	8001b44 <HAL_GPIO_Init+0x1f4>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a4b      	ldr	r2, [pc, #300]	@ (8001c40 <HAL_GPIO_Init+0x2f0>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d013      	beq.n	8001b40 <HAL_GPIO_Init+0x1f0>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a4a      	ldr	r2, [pc, #296]	@ (8001c44 <HAL_GPIO_Init+0x2f4>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d00d      	beq.n	8001b3c <HAL_GPIO_Init+0x1ec>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a49      	ldr	r2, [pc, #292]	@ (8001c48 <HAL_GPIO_Init+0x2f8>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d007      	beq.n	8001b38 <HAL_GPIO_Init+0x1e8>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a48      	ldr	r2, [pc, #288]	@ (8001c4c <HAL_GPIO_Init+0x2fc>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d101      	bne.n	8001b34 <HAL_GPIO_Init+0x1e4>
 8001b30:	2305      	movs	r3, #5
 8001b32:	e00a      	b.n	8001b4a <HAL_GPIO_Init+0x1fa>
 8001b34:	2306      	movs	r3, #6
 8001b36:	e008      	b.n	8001b4a <HAL_GPIO_Init+0x1fa>
 8001b38:	2304      	movs	r3, #4
 8001b3a:	e006      	b.n	8001b4a <HAL_GPIO_Init+0x1fa>
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e004      	b.n	8001b4a <HAL_GPIO_Init+0x1fa>
 8001b40:	2302      	movs	r3, #2
 8001b42:	e002      	b.n	8001b4a <HAL_GPIO_Init+0x1fa>
 8001b44:	2301      	movs	r3, #1
 8001b46:	e000      	b.n	8001b4a <HAL_GPIO_Init+0x1fa>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	f002 0203 	and.w	r2, r2, #3
 8001b50:	0092      	lsls	r2, r2, #2
 8001b52:	4093      	lsls	r3, r2
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b5a:	4937      	ldr	r1, [pc, #220]	@ (8001c38 <HAL_GPIO_Init+0x2e8>)
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	089b      	lsrs	r3, r3, #2
 8001b60:	3302      	adds	r3, #2
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b68:	4b39      	ldr	r3, [pc, #228]	@ (8001c50 <HAL_GPIO_Init+0x300>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4013      	ands	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b8c:	4a30      	ldr	r2, [pc, #192]	@ (8001c50 <HAL_GPIO_Init+0x300>)
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b92:	4b2f      	ldr	r3, [pc, #188]	@ (8001c50 <HAL_GPIO_Init+0x300>)
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bb6:	4a26      	ldr	r2, [pc, #152]	@ (8001c50 <HAL_GPIO_Init+0x300>)
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001bbc:	4b24      	ldr	r3, [pc, #144]	@ (8001c50 <HAL_GPIO_Init+0x300>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001be0:	4a1b      	ldr	r2, [pc, #108]	@ (8001c50 <HAL_GPIO_Init+0x300>)
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001be6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c50 <HAL_GPIO_Init+0x300>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c0a:	4a11      	ldr	r2, [pc, #68]	@ (8001c50 <HAL_GPIO_Init+0x300>)
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	3301      	adds	r3, #1
 8001c14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f47f ae9d 	bne.w	8001960 <HAL_GPIO_Init+0x10>
  }
}
 8001c26:	bf00      	nop
 8001c28:	bf00      	nop
 8001c2a:	371c      	adds	r7, #28
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40010000 	.word	0x40010000
 8001c3c:	48000400 	.word	0x48000400
 8001c40:	48000800 	.word	0x48000800
 8001c44:	48000c00 	.word	0x48000c00
 8001c48:	48001000 	.word	0x48001000
 8001c4c:	48001400 	.word	0x48001400
 8001c50:	40010400 	.word	0x40010400

08001c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	807b      	strh	r3, [r7, #2]
 8001c60:	4613      	mov	r3, r2
 8001c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c64:	787b      	ldrb	r3, [r7, #1]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c6a:	887a      	ldrh	r2, [r7, #2]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c70:	e002      	b.n	8001c78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c72:	887a      	ldrh	r2, [r7, #2]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c96:	887a      	ldrh	r2, [r7, #2]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	041a      	lsls	r2, r3, #16
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	43d9      	mvns	r1, r3
 8001ca2:	887b      	ldrh	r3, [r7, #2]
 8001ca4:	400b      	ands	r3, r1
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	619a      	str	r2, [r3, #24]
}
 8001cac:	bf00      	nop
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d141      	bne.n	8001d4a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cc6:	4b4b      	ldr	r3, [pc, #300]	@ (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001cce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cd2:	d131      	bne.n	8001d38 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cd4:	4b47      	ldr	r3, [pc, #284]	@ (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001cda:	4a46      	ldr	r2, [pc, #280]	@ (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ce0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ce4:	4b43      	ldr	r3, [pc, #268]	@ (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001cec:	4a41      	ldr	r2, [pc, #260]	@ (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cf2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cf4:	4b40      	ldr	r3, [pc, #256]	@ (8001df8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2232      	movs	r2, #50	@ 0x32
 8001cfa:	fb02 f303 	mul.w	r3, r2, r3
 8001cfe:	4a3f      	ldr	r2, [pc, #252]	@ (8001dfc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d00:	fba2 2303 	umull	r2, r3, r2, r3
 8001d04:	0c9b      	lsrs	r3, r3, #18
 8001d06:	3301      	adds	r3, #1
 8001d08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d0a:	e002      	b.n	8001d12 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d12:	4b38      	ldr	r3, [pc, #224]	@ (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d1e:	d102      	bne.n	8001d26 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f2      	bne.n	8001d0c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d26:	4b33      	ldr	r3, [pc, #204]	@ (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d32:	d158      	bne.n	8001de6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e057      	b.n	8001de8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d38:	4b2e      	ldr	r3, [pc, #184]	@ (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d3e:	4a2d      	ldr	r2, [pc, #180]	@ (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001d48:	e04d      	b.n	8001de6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d50:	d141      	bne.n	8001dd6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d52:	4b28      	ldr	r3, [pc, #160]	@ (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d5e:	d131      	bne.n	8001dc4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d60:	4b24      	ldr	r3, [pc, #144]	@ (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d66:	4a23      	ldr	r2, [pc, #140]	@ (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d70:	4b20      	ldr	r3, [pc, #128]	@ (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d78:	4a1e      	ldr	r2, [pc, #120]	@ (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d80:	4b1d      	ldr	r3, [pc, #116]	@ (8001df8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2232      	movs	r2, #50	@ 0x32
 8001d86:	fb02 f303 	mul.w	r3, r2, r3
 8001d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8001dfc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d90:	0c9b      	lsrs	r3, r3, #18
 8001d92:	3301      	adds	r3, #1
 8001d94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d96:	e002      	b.n	8001d9e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d9e:	4b15      	ldr	r3, [pc, #84]	@ (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001da6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001daa:	d102      	bne.n	8001db2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f2      	bne.n	8001d98 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001db2:	4b10      	ldr	r3, [pc, #64]	@ (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dbe:	d112      	bne.n	8001de6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e011      	b.n	8001de8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001dca:	4a0a      	ldr	r2, [pc, #40]	@ (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dd0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001dd4:	e007      	b.n	8001de6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dd6:	4b07      	ldr	r3, [pc, #28]	@ (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001dde:	4a05      	ldr	r2, [pc, #20]	@ (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001de4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	40007000 	.word	0x40007000
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	431bde83 	.word	0x431bde83

08001e00 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001e04:	4b05      	ldr	r3, [pc, #20]	@ (8001e1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	4a04      	ldr	r2, [pc, #16]	@ (8001e1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e0e:	6093      	str	r3, [r2, #8]
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40007000 	.word	0x40007000

08001e20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e2fe      	b.n	8002430 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d075      	beq.n	8001f2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e3e:	4b97      	ldr	r3, [pc, #604]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e48:	4b94      	ldr	r3, [pc, #592]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	2b0c      	cmp	r3, #12
 8001e56:	d102      	bne.n	8001e5e <HAL_RCC_OscConfig+0x3e>
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	d002      	beq.n	8001e64 <HAL_RCC_OscConfig+0x44>
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d10b      	bne.n	8001e7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e64:	4b8d      	ldr	r3, [pc, #564]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d05b      	beq.n	8001f28 <HAL_RCC_OscConfig+0x108>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d157      	bne.n	8001f28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e2d9      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e84:	d106      	bne.n	8001e94 <HAL_RCC_OscConfig+0x74>
 8001e86:	4b85      	ldr	r3, [pc, #532]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a84      	ldr	r2, [pc, #528]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8001e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	e01d      	b.n	8001ed0 <HAL_RCC_OscConfig+0xb0>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x98>
 8001e9e:	4b7f      	ldr	r3, [pc, #508]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a7e      	ldr	r2, [pc, #504]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8001ea4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	4b7c      	ldr	r3, [pc, #496]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a7b      	ldr	r2, [pc, #492]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8001eb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	e00b      	b.n	8001ed0 <HAL_RCC_OscConfig+0xb0>
 8001eb8:	4b78      	ldr	r3, [pc, #480]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a77      	ldr	r2, [pc, #476]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8001ebe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	4b75      	ldr	r3, [pc, #468]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a74      	ldr	r2, [pc, #464]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8001eca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d013      	beq.n	8001f00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed8:	f7fe fe24 	bl	8000b24 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee0:	f7fe fe20 	bl	8000b24 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b64      	cmp	r3, #100	@ 0x64
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e29e      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ef2:	4b6a      	ldr	r3, [pc, #424]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0xc0>
 8001efe:	e014      	b.n	8001f2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f00:	f7fe fe10 	bl	8000b24 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f08:	f7fe fe0c 	bl	8000b24 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b64      	cmp	r3, #100	@ 0x64
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e28a      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f1a:	4b60      	ldr	r3, [pc, #384]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0xe8>
 8001f26:	e000      	b.n	8001f2a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d075      	beq.n	8002022 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f36:	4b59      	ldr	r3, [pc, #356]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f40:	4b56      	ldr	r3, [pc, #344]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	2b0c      	cmp	r3, #12
 8001f4e:	d102      	bne.n	8001f56 <HAL_RCC_OscConfig+0x136>
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d002      	beq.n	8001f5c <HAL_RCC_OscConfig+0x13c>
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	2b04      	cmp	r3, #4
 8001f5a:	d11f      	bne.n	8001f9c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f5c:	4b4f      	ldr	r3, [pc, #316]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_RCC_OscConfig+0x154>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e25d      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f74:	4b49      	ldr	r3, [pc, #292]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	061b      	lsls	r3, r3, #24
 8001f82:	4946      	ldr	r1, [pc, #280]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f88:	4b45      	ldr	r3, [pc, #276]	@ (80020a0 <HAL_RCC_OscConfig+0x280>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe fd7d 	bl	8000a8c <HAL_InitTick>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d043      	beq.n	8002020 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e249      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d023      	beq.n	8001fec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fa4:	4b3d      	ldr	r3, [pc, #244]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a3c      	ldr	r2, [pc, #240]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8001faa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7fe fdb8 	bl	8000b24 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb8:	f7fe fdb4 	bl	8000b24 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e232      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fca:	4b34      	ldr	r3, [pc, #208]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd6:	4b31      	ldr	r3, [pc, #196]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	061b      	lsls	r3, r3, #24
 8001fe4:	492d      	ldr	r1, [pc, #180]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	604b      	str	r3, [r1, #4]
 8001fea:	e01a      	b.n	8002022 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fec:	4b2b      	ldr	r3, [pc, #172]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a2a      	ldr	r2, [pc, #168]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8001ff2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff8:	f7fe fd94 	bl	8000b24 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002000:	f7fe fd90 	bl	8000b24 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e20e      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002012:	4b22      	ldr	r3, [pc, #136]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x1e0>
 800201e:	e000      	b.n	8002022 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002020:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	2b00      	cmp	r3, #0
 800202c:	d041      	beq.n	80020b2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d01c      	beq.n	8002070 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002036:	4b19      	ldr	r3, [pc, #100]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8002038:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800203c:	4a17      	ldr	r2, [pc, #92]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002046:	f7fe fd6d 	bl	8000b24 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800204e:	f7fe fd69 	bl	8000b24 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e1e7      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002060:	4b0e      	ldr	r3, [pc, #56]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8002062:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0ef      	beq.n	800204e <HAL_RCC_OscConfig+0x22e>
 800206e:	e020      	b.n	80020b2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002070:	4b0a      	ldr	r3, [pc, #40]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8002072:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002076:	4a09      	ldr	r2, [pc, #36]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8002078:	f023 0301 	bic.w	r3, r3, #1
 800207c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002080:	f7fe fd50 	bl	8000b24 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002086:	e00d      	b.n	80020a4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002088:	f7fe fd4c 	bl	8000b24 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d906      	bls.n	80020a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e1ca      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
 800209a:	bf00      	nop
 800209c:	40021000 	.word	0x40021000
 80020a0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020a4:	4b8c      	ldr	r3, [pc, #560]	@ (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 80020a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1ea      	bne.n	8002088 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 80a6 	beq.w	800220c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020c0:	2300      	movs	r3, #0
 80020c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020c4:	4b84      	ldr	r3, [pc, #528]	@ (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 80020c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_RCC_OscConfig+0x2b4>
 80020d0:	2301      	movs	r3, #1
 80020d2:	e000      	b.n	80020d6 <HAL_RCC_OscConfig+0x2b6>
 80020d4:	2300      	movs	r3, #0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00d      	beq.n	80020f6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020da:	4b7f      	ldr	r3, [pc, #508]	@ (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 80020dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020de:	4a7e      	ldr	r2, [pc, #504]	@ (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 80020e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80020e6:	4b7c      	ldr	r3, [pc, #496]	@ (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 80020e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80020f2:	2301      	movs	r3, #1
 80020f4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020f6:	4b79      	ldr	r3, [pc, #484]	@ (80022dc <HAL_RCC_OscConfig+0x4bc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d118      	bne.n	8002134 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002102:	4b76      	ldr	r3, [pc, #472]	@ (80022dc <HAL_RCC_OscConfig+0x4bc>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a75      	ldr	r2, [pc, #468]	@ (80022dc <HAL_RCC_OscConfig+0x4bc>)
 8002108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800210c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800210e:	f7fe fd09 	bl	8000b24 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002116:	f7fe fd05 	bl	8000b24 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e183      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002128:	4b6c      	ldr	r3, [pc, #432]	@ (80022dc <HAL_RCC_OscConfig+0x4bc>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f0      	beq.n	8002116 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d108      	bne.n	800214e <HAL_RCC_OscConfig+0x32e>
 800213c:	4b66      	ldr	r3, [pc, #408]	@ (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 800213e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002142:	4a65      	ldr	r2, [pc, #404]	@ (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800214c:	e024      	b.n	8002198 <HAL_RCC_OscConfig+0x378>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b05      	cmp	r3, #5
 8002154:	d110      	bne.n	8002178 <HAL_RCC_OscConfig+0x358>
 8002156:	4b60      	ldr	r3, [pc, #384]	@ (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 8002158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800215c:	4a5e      	ldr	r2, [pc, #376]	@ (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 800215e:	f043 0304 	orr.w	r3, r3, #4
 8002162:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002166:	4b5c      	ldr	r3, [pc, #368]	@ (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 8002168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800216c:	4a5a      	ldr	r2, [pc, #360]	@ (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002176:	e00f      	b.n	8002198 <HAL_RCC_OscConfig+0x378>
 8002178:	4b57      	ldr	r3, [pc, #348]	@ (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 800217a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800217e:	4a56      	ldr	r2, [pc, #344]	@ (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 8002180:	f023 0301 	bic.w	r3, r3, #1
 8002184:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002188:	4b53      	ldr	r3, [pc, #332]	@ (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 800218a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800218e:	4a52      	ldr	r2, [pc, #328]	@ (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 8002190:	f023 0304 	bic.w	r3, r3, #4
 8002194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d016      	beq.n	80021ce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a0:	f7fe fcc0 	bl	8000b24 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021a6:	e00a      	b.n	80021be <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a8:	f7fe fcbc 	bl	8000b24 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e138      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021be:	4b46      	ldr	r3, [pc, #280]	@ (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 80021c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0ed      	beq.n	80021a8 <HAL_RCC_OscConfig+0x388>
 80021cc:	e015      	b.n	80021fa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ce:	f7fe fca9 	bl	8000b24 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021d4:	e00a      	b.n	80021ec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d6:	f7fe fca5 	bl	8000b24 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e121      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021ec:	4b3a      	ldr	r3, [pc, #232]	@ (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 80021ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1ed      	bne.n	80021d6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021fa:	7ffb      	ldrb	r3, [r7, #31]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d105      	bne.n	800220c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002200:	4b35      	ldr	r3, [pc, #212]	@ (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 8002202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002204:	4a34      	ldr	r2, [pc, #208]	@ (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 8002206:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800220a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0320 	and.w	r3, r3, #32
 8002214:	2b00      	cmp	r3, #0
 8002216:	d03c      	beq.n	8002292 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d01c      	beq.n	800225a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002220:	4b2d      	ldr	r3, [pc, #180]	@ (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 8002222:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002226:	4a2c      	ldr	r2, [pc, #176]	@ (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002230:	f7fe fc78 	bl	8000b24 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002238:	f7fe fc74 	bl	8000b24 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e0f2      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800224a:	4b23      	ldr	r3, [pc, #140]	@ (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 800224c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0ef      	beq.n	8002238 <HAL_RCC_OscConfig+0x418>
 8002258:	e01b      	b.n	8002292 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800225a:	4b1f      	ldr	r3, [pc, #124]	@ (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 800225c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002260:	4a1d      	ldr	r2, [pc, #116]	@ (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 8002262:	f023 0301 	bic.w	r3, r3, #1
 8002266:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226a:	f7fe fc5b 	bl	8000b24 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002272:	f7fe fc57 	bl	8000b24 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e0d5      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002284:	4b14      	ldr	r3, [pc, #80]	@ (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 8002286:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1ef      	bne.n	8002272 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 80c9 	beq.w	800242e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800229c:	4b0e      	ldr	r3, [pc, #56]	@ (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 030c 	and.w	r3, r3, #12
 80022a4:	2b0c      	cmp	r3, #12
 80022a6:	f000 8083 	beq.w	80023b0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d15e      	bne.n	8002370 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b2:	4b09      	ldr	r3, [pc, #36]	@ (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a08      	ldr	r2, [pc, #32]	@ (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 80022b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022be:	f7fe fc31 	bl	8000b24 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c4:	e00c      	b.n	80022e0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c6:	f7fe fc2d 	bl	8000b24 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d905      	bls.n	80022e0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e0ab      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e0:	4b55      	ldr	r3, [pc, #340]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1ec      	bne.n	80022c6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ec:	4b52      	ldr	r3, [pc, #328]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	4b52      	ldr	r3, [pc, #328]	@ (800243c <HAL_RCC_OscConfig+0x61c>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6a11      	ldr	r1, [r2, #32]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022fc:	3a01      	subs	r2, #1
 80022fe:	0112      	lsls	r2, r2, #4
 8002300:	4311      	orrs	r1, r2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002306:	0212      	lsls	r2, r2, #8
 8002308:	4311      	orrs	r1, r2
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800230e:	0852      	lsrs	r2, r2, #1
 8002310:	3a01      	subs	r2, #1
 8002312:	0552      	lsls	r2, r2, #21
 8002314:	4311      	orrs	r1, r2
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800231a:	0852      	lsrs	r2, r2, #1
 800231c:	3a01      	subs	r2, #1
 800231e:	0652      	lsls	r2, r2, #25
 8002320:	4311      	orrs	r1, r2
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002326:	06d2      	lsls	r2, r2, #27
 8002328:	430a      	orrs	r2, r1
 800232a:	4943      	ldr	r1, [pc, #268]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 800232c:	4313      	orrs	r3, r2
 800232e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002330:	4b41      	ldr	r3, [pc, #260]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a40      	ldr	r2, [pc, #256]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 8002336:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800233a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800233c:	4b3e      	ldr	r3, [pc, #248]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4a3d      	ldr	r2, [pc, #244]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 8002342:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002346:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7fe fbec 	bl	8000b24 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002350:	f7fe fbe8 	bl	8000b24 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e066      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002362:	4b35      	ldr	r3, [pc, #212]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x530>
 800236e:	e05e      	b.n	800242e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002370:	4b31      	ldr	r3, [pc, #196]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a30      	ldr	r2, [pc, #192]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 8002376:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800237a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7fe fbd2 	bl	8000b24 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002384:	f7fe fbce 	bl	8000b24 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e04c      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002396:	4b28      	ldr	r3, [pc, #160]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80023a2:	4b25      	ldr	r3, [pc, #148]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	4924      	ldr	r1, [pc, #144]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 80023a8:	4b25      	ldr	r3, [pc, #148]	@ (8002440 <HAL_RCC_OscConfig+0x620>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	60cb      	str	r3, [r1, #12]
 80023ae:	e03e      	b.n	800242e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e039      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80023bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f003 0203 	and.w	r2, r3, #3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d12c      	bne.n	800242a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023da:	3b01      	subs	r3, #1
 80023dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023de:	429a      	cmp	r2, r3
 80023e0:	d123      	bne.n	800242a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d11b      	bne.n	800242a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023fc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80023fe:	429a      	cmp	r2, r3
 8002400:	d113      	bne.n	800242a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240c:	085b      	lsrs	r3, r3, #1
 800240e:	3b01      	subs	r3, #1
 8002410:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002412:	429a      	cmp	r2, r3
 8002414:	d109      	bne.n	800242a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002420:	085b      	lsrs	r3, r3, #1
 8002422:	3b01      	subs	r3, #1
 8002424:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002426:	429a      	cmp	r2, r3
 8002428:	d001      	beq.n	800242e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3720      	adds	r7, #32
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40021000 	.word	0x40021000
 800243c:	019f800c 	.word	0x019f800c
 8002440:	feeefffc 	.word	0xfeeefffc

08002444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e11e      	b.n	800269a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800245c:	4b91      	ldr	r3, [pc, #580]	@ (80026a4 <HAL_RCC_ClockConfig+0x260>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 030f 	and.w	r3, r3, #15
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d910      	bls.n	800248c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246a:	4b8e      	ldr	r3, [pc, #568]	@ (80026a4 <HAL_RCC_ClockConfig+0x260>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 020f 	bic.w	r2, r3, #15
 8002472:	498c      	ldr	r1, [pc, #560]	@ (80026a4 <HAL_RCC_ClockConfig+0x260>)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	4313      	orrs	r3, r2
 8002478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800247a:	4b8a      	ldr	r3, [pc, #552]	@ (80026a4 <HAL_RCC_ClockConfig+0x260>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d001      	beq.n	800248c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e106      	b.n	800269a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d073      	beq.n	8002580 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b03      	cmp	r3, #3
 800249e:	d129      	bne.n	80024f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024a0:	4b81      	ldr	r3, [pc, #516]	@ (80026a8 <HAL_RCC_ClockConfig+0x264>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0f4      	b.n	800269a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80024b0:	f000 f966 	bl	8002780 <RCC_GetSysClockFreqFromPLLSource>
 80024b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4a7c      	ldr	r2, [pc, #496]	@ (80026ac <HAL_RCC_ClockConfig+0x268>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d93f      	bls.n	800253e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80024be:	4b7a      	ldr	r3, [pc, #488]	@ (80026a8 <HAL_RCC_ClockConfig+0x264>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d009      	beq.n	80024de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d033      	beq.n	800253e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d12f      	bne.n	800253e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024de:	4b72      	ldr	r3, [pc, #456]	@ (80026a8 <HAL_RCC_ClockConfig+0x264>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024e6:	4a70      	ldr	r2, [pc, #448]	@ (80026a8 <HAL_RCC_ClockConfig+0x264>)
 80024e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80024ee:	2380      	movs	r3, #128	@ 0x80
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	e024      	b.n	800253e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d107      	bne.n	800250c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024fc:	4b6a      	ldr	r3, [pc, #424]	@ (80026a8 <HAL_RCC_ClockConfig+0x264>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d109      	bne.n	800251c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0c6      	b.n	800269a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800250c:	4b66      	ldr	r3, [pc, #408]	@ (80026a8 <HAL_RCC_ClockConfig+0x264>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0be      	b.n	800269a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800251c:	f000 f8ce 	bl	80026bc <HAL_RCC_GetSysClockFreq>
 8002520:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4a61      	ldr	r2, [pc, #388]	@ (80026ac <HAL_RCC_ClockConfig+0x268>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d909      	bls.n	800253e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800252a:	4b5f      	ldr	r3, [pc, #380]	@ (80026a8 <HAL_RCC_ClockConfig+0x264>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002532:	4a5d      	ldr	r2, [pc, #372]	@ (80026a8 <HAL_RCC_ClockConfig+0x264>)
 8002534:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002538:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800253a:	2380      	movs	r3, #128	@ 0x80
 800253c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800253e:	4b5a      	ldr	r3, [pc, #360]	@ (80026a8 <HAL_RCC_ClockConfig+0x264>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f023 0203 	bic.w	r2, r3, #3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	4957      	ldr	r1, [pc, #348]	@ (80026a8 <HAL_RCC_ClockConfig+0x264>)
 800254c:	4313      	orrs	r3, r2
 800254e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002550:	f7fe fae8 	bl	8000b24 <HAL_GetTick>
 8002554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002556:	e00a      	b.n	800256e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002558:	f7fe fae4 	bl	8000b24 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002566:	4293      	cmp	r3, r2
 8002568:	d901      	bls.n	800256e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e095      	b.n	800269a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256e:	4b4e      	ldr	r3, [pc, #312]	@ (80026a8 <HAL_RCC_ClockConfig+0x264>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 020c 	and.w	r2, r3, #12
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	429a      	cmp	r2, r3
 800257e:	d1eb      	bne.n	8002558 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d023      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002598:	4b43      	ldr	r3, [pc, #268]	@ (80026a8 <HAL_RCC_ClockConfig+0x264>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	4a42      	ldr	r2, [pc, #264]	@ (80026a8 <HAL_RCC_ClockConfig+0x264>)
 800259e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80025a2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0308 	and.w	r3, r3, #8
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d007      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80025b0:	4b3d      	ldr	r3, [pc, #244]	@ (80026a8 <HAL_RCC_ClockConfig+0x264>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80025b8:	4a3b      	ldr	r2, [pc, #236]	@ (80026a8 <HAL_RCC_ClockConfig+0x264>)
 80025ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80025be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c0:	4b39      	ldr	r3, [pc, #228]	@ (80026a8 <HAL_RCC_ClockConfig+0x264>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	4936      	ldr	r1, [pc, #216]	@ (80026a8 <HAL_RCC_ClockConfig+0x264>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	608b      	str	r3, [r1, #8]
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	2b80      	cmp	r3, #128	@ 0x80
 80025d8:	d105      	bne.n	80025e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80025da:	4b33      	ldr	r3, [pc, #204]	@ (80026a8 <HAL_RCC_ClockConfig+0x264>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	4a32      	ldr	r2, [pc, #200]	@ (80026a8 <HAL_RCC_ClockConfig+0x264>)
 80025e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025e4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025e6:	4b2f      	ldr	r3, [pc, #188]	@ (80026a4 <HAL_RCC_ClockConfig+0x260>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d21d      	bcs.n	8002630 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f4:	4b2b      	ldr	r3, [pc, #172]	@ (80026a4 <HAL_RCC_ClockConfig+0x260>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f023 020f 	bic.w	r2, r3, #15
 80025fc:	4929      	ldr	r1, [pc, #164]	@ (80026a4 <HAL_RCC_ClockConfig+0x260>)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	4313      	orrs	r3, r2
 8002602:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002604:	f7fe fa8e 	bl	8000b24 <HAL_GetTick>
 8002608:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800260a:	e00a      	b.n	8002622 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800260c:	f7fe fa8a 	bl	8000b24 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800261a:	4293      	cmp	r3, r2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e03b      	b.n	800269a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002622:	4b20      	ldr	r3, [pc, #128]	@ (80026a4 <HAL_RCC_ClockConfig+0x260>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d1ed      	bne.n	800260c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d008      	beq.n	800264e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800263c:	4b1a      	ldr	r3, [pc, #104]	@ (80026a8 <HAL_RCC_ClockConfig+0x264>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	4917      	ldr	r1, [pc, #92]	@ (80026a8 <HAL_RCC_ClockConfig+0x264>)
 800264a:	4313      	orrs	r3, r2
 800264c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d009      	beq.n	800266e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800265a:	4b13      	ldr	r3, [pc, #76]	@ (80026a8 <HAL_RCC_ClockConfig+0x264>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	490f      	ldr	r1, [pc, #60]	@ (80026a8 <HAL_RCC_ClockConfig+0x264>)
 800266a:	4313      	orrs	r3, r2
 800266c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800266e:	f000 f825 	bl	80026bc <HAL_RCC_GetSysClockFreq>
 8002672:	4602      	mov	r2, r0
 8002674:	4b0c      	ldr	r3, [pc, #48]	@ (80026a8 <HAL_RCC_ClockConfig+0x264>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	091b      	lsrs	r3, r3, #4
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	490c      	ldr	r1, [pc, #48]	@ (80026b0 <HAL_RCC_ClockConfig+0x26c>)
 8002680:	5ccb      	ldrb	r3, [r1, r3]
 8002682:	f003 031f 	and.w	r3, r3, #31
 8002686:	fa22 f303 	lsr.w	r3, r2, r3
 800268a:	4a0a      	ldr	r2, [pc, #40]	@ (80026b4 <HAL_RCC_ClockConfig+0x270>)
 800268c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800268e:	4b0a      	ldr	r3, [pc, #40]	@ (80026b8 <HAL_RCC_ClockConfig+0x274>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7fe f9fa 	bl	8000a8c <HAL_InitTick>
 8002698:	4603      	mov	r3, r0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40022000 	.word	0x40022000
 80026a8:	40021000 	.word	0x40021000
 80026ac:	04c4b400 	.word	0x04c4b400
 80026b0:	08003c44 	.word	0x08003c44
 80026b4:	20000000 	.word	0x20000000
 80026b8:	20000004 	.word	0x20000004

080026bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	b087      	sub	sp, #28
 80026c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80026c2:	4b2c      	ldr	r3, [pc, #176]	@ (8002774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 030c 	and.w	r3, r3, #12
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	d102      	bne.n	80026d4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002778 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	e047      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80026d4:	4b27      	ldr	r3, [pc, #156]	@ (8002774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 030c 	and.w	r3, r3, #12
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d102      	bne.n	80026e6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026e0:	4b26      	ldr	r3, [pc, #152]	@ (800277c <HAL_RCC_GetSysClockFreq+0xc0>)
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	e03e      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80026e6:	4b23      	ldr	r3, [pc, #140]	@ (8002774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	2b0c      	cmp	r3, #12
 80026f0:	d136      	bne.n	8002760 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026f2:	4b20      	ldr	r3, [pc, #128]	@ (8002774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	3301      	adds	r3, #1
 8002708:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b03      	cmp	r3, #3
 800270e:	d10c      	bne.n	800272a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002710:	4a1a      	ldr	r2, [pc, #104]	@ (800277c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	fbb2 f3f3 	udiv	r3, r2, r3
 8002718:	4a16      	ldr	r2, [pc, #88]	@ (8002774 <HAL_RCC_GetSysClockFreq+0xb8>)
 800271a:	68d2      	ldr	r2, [r2, #12]
 800271c:	0a12      	lsrs	r2, r2, #8
 800271e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002722:	fb02 f303 	mul.w	r3, r2, r3
 8002726:	617b      	str	r3, [r7, #20]
      break;
 8002728:	e00c      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800272a:	4a13      	ldr	r2, [pc, #76]	@ (8002778 <HAL_RCC_GetSysClockFreq+0xbc>)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002732:	4a10      	ldr	r2, [pc, #64]	@ (8002774 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002734:	68d2      	ldr	r2, [r2, #12]
 8002736:	0a12      	lsrs	r2, r2, #8
 8002738:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800273c:	fb02 f303 	mul.w	r3, r2, r3
 8002740:	617b      	str	r3, [r7, #20]
      break;
 8002742:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002744:	4b0b      	ldr	r3, [pc, #44]	@ (8002774 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	0e5b      	lsrs	r3, r3, #25
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	3301      	adds	r3, #1
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	fbb2 f3f3 	udiv	r3, r2, r3
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	e001      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002764:	693b      	ldr	r3, [r7, #16]
}
 8002766:	4618      	mov	r0, r3
 8002768:	371c      	adds	r7, #28
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40021000 	.word	0x40021000
 8002778:	00f42400 	.word	0x00f42400
 800277c:	007a1200 	.word	0x007a1200

08002780 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002780:	b480      	push	{r7}
 8002782:	b087      	sub	sp, #28
 8002784:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002786:	4b1e      	ldr	r3, [pc, #120]	@ (8002800 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002790:	4b1b      	ldr	r3, [pc, #108]	@ (8002800 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	091b      	lsrs	r3, r3, #4
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	3301      	adds	r3, #1
 800279c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	d10c      	bne.n	80027be <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027a4:	4a17      	ldr	r2, [pc, #92]	@ (8002804 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ac:	4a14      	ldr	r2, [pc, #80]	@ (8002800 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027ae:	68d2      	ldr	r2, [r2, #12]
 80027b0:	0a12      	lsrs	r2, r2, #8
 80027b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80027b6:	fb02 f303 	mul.w	r3, r2, r3
 80027ba:	617b      	str	r3, [r7, #20]
    break;
 80027bc:	e00c      	b.n	80027d8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027be:	4a12      	ldr	r2, [pc, #72]	@ (8002808 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c6:	4a0e      	ldr	r2, [pc, #56]	@ (8002800 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027c8:	68d2      	ldr	r2, [r2, #12]
 80027ca:	0a12      	lsrs	r2, r2, #8
 80027cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80027d0:	fb02 f303 	mul.w	r3, r2, r3
 80027d4:	617b      	str	r3, [r7, #20]
    break;
 80027d6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027d8:	4b09      	ldr	r3, [pc, #36]	@ (8002800 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	0e5b      	lsrs	r3, r3, #25
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	3301      	adds	r3, #1
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80027f2:	687b      	ldr	r3, [r7, #4]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	371c      	adds	r7, #28
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	40021000 	.word	0x40021000
 8002804:	007a1200 	.word	0x007a1200
 8002808:	00f42400 	.word	0x00f42400

0800280c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002814:	2300      	movs	r3, #0
 8002816:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002818:	2300      	movs	r3, #0
 800281a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 8098 	beq.w	800295a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800282a:	2300      	movs	r3, #0
 800282c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800282e:	4b43      	ldr	r3, [pc, #268]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10d      	bne.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800283a:	4b40      	ldr	r3, [pc, #256]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800283c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800283e:	4a3f      	ldr	r2, [pc, #252]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002840:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002844:	6593      	str	r3, [r2, #88]	@ 0x58
 8002846:	4b3d      	ldr	r3, [pc, #244]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800284e:	60bb      	str	r3, [r7, #8]
 8002850:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002852:	2301      	movs	r3, #1
 8002854:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002856:	4b3a      	ldr	r3, [pc, #232]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a39      	ldr	r2, [pc, #228]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800285c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002860:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002862:	f7fe f95f 	bl	8000b24 <HAL_GetTick>
 8002866:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002868:	e009      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800286a:	f7fe f95b 	bl	8000b24 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d902      	bls.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	74fb      	strb	r3, [r7, #19]
        break;
 800287c:	e005      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800287e:	4b30      	ldr	r3, [pc, #192]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0ef      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800288a:	7cfb      	ldrb	r3, [r7, #19]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d159      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002890:	4b2a      	ldr	r3, [pc, #168]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002896:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800289a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d01e      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d019      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028ac:	4b23      	ldr	r3, [pc, #140]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028b8:	4b20      	ldr	r3, [pc, #128]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028be:	4a1f      	ldr	r2, [pc, #124]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028c8:	4b1c      	ldr	r3, [pc, #112]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ce:	4a1b      	ldr	r2, [pc, #108]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028d8:	4a18      	ldr	r2, [pc, #96]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d016      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ea:	f7fe f91b 	bl	8000b24 <HAL_GetTick>
 80028ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028f0:	e00b      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f2:	f7fe f917 	bl	8000b24 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002900:	4293      	cmp	r3, r2
 8002902:	d902      	bls.n	800290a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	74fb      	strb	r3, [r7, #19]
            break;
 8002908:	e006      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800290a:	4b0c      	ldr	r3, [pc, #48]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800290c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0ec      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002918:	7cfb      	ldrb	r3, [r7, #19]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10b      	bne.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800291e:	4b07      	ldr	r3, [pc, #28]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002924:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800292c:	4903      	ldr	r1, [pc, #12]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800292e:	4313      	orrs	r3, r2
 8002930:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002934:	e008      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002936:	7cfb      	ldrb	r3, [r7, #19]
 8002938:	74bb      	strb	r3, [r7, #18]
 800293a:	e005      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800293c:	40021000 	.word	0x40021000
 8002940:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002944:	7cfb      	ldrb	r3, [r7, #19]
 8002946:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002948:	7c7b      	ldrb	r3, [r7, #17]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d105      	bne.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800294e:	4ba7      	ldr	r3, [pc, #668]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002952:	4aa6      	ldr	r2, [pc, #664]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002954:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002958:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00a      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002966:	4ba1      	ldr	r3, [pc, #644]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800296c:	f023 0203 	bic.w	r2, r3, #3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	499d      	ldr	r1, [pc, #628]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002976:	4313      	orrs	r3, r2
 8002978:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00a      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002988:	4b98      	ldr	r3, [pc, #608]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800298a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800298e:	f023 020c 	bic.w	r2, r3, #12
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	4995      	ldr	r1, [pc, #596]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00a      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029aa:	4b90      	ldr	r3, [pc, #576]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	498c      	ldr	r1, [pc, #560]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0308 	and.w	r3, r3, #8
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00a      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029cc:	4b87      	ldr	r3, [pc, #540]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	4984      	ldr	r1, [pc, #528]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0310 	and.w	r3, r3, #16
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00a      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029ee:	4b7f      	ldr	r3, [pc, #508]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	497b      	ldr	r1, [pc, #492]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0320 	and.w	r3, r3, #32
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00a      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a10:	4b76      	ldr	r3, [pc, #472]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a16:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	4973      	ldr	r1, [pc, #460]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00a      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a32:	4b6e      	ldr	r3, [pc, #440]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a38:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	496a      	ldr	r1, [pc, #424]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00a      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a54:	4b65      	ldr	r3, [pc, #404]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a5a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	4962      	ldr	r1, [pc, #392]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00a      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a76:	4b5d      	ldr	r3, [pc, #372]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a7c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a84:	4959      	ldr	r1, [pc, #356]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00a      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a98:	4b54      	ldr	r3, [pc, #336]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a9e:	f023 0203 	bic.w	r2, r3, #3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa6:	4951      	ldr	r1, [pc, #324]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00a      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002aba:	4b4c      	ldr	r3, [pc, #304]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac8:	4948      	ldr	r1, [pc, #288]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d015      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002adc:	4b43      	ldr	r3, [pc, #268]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ae2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aea:	4940      	ldr	r1, [pc, #256]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002afa:	d105      	bne.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002afc:	4b3b      	ldr	r3, [pc, #236]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	4a3a      	ldr	r2, [pc, #232]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b06:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d015      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b14:	4b35      	ldr	r3, [pc, #212]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b1a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b22:	4932      	ldr	r1, [pc, #200]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b32:	d105      	bne.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b34:	4b2d      	ldr	r3, [pc, #180]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	4a2c      	ldr	r2, [pc, #176]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b3e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d015      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b4c:	4b27      	ldr	r3, [pc, #156]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b52:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b5a:	4924      	ldr	r1, [pc, #144]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b6a:	d105      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b6c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	4a1e      	ldr	r2, [pc, #120]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b76:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d015      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b84:	4b19      	ldr	r3, [pc, #100]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b8a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b92:	4916      	ldr	r1, [pc, #88]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ba2:	d105      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ba4:	4b11      	ldr	r3, [pc, #68]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	4a10      	ldr	r2, [pc, #64]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002baa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d019      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bc2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bca:	4908      	ldr	r1, [pc, #32]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bda:	d109      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bdc:	4b03      	ldr	r3, [pc, #12]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	4a02      	ldr	r2, [pc, #8]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002be2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002be6:	60d3      	str	r3, [r2, #12]
 8002be8:	e002      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002bea:	bf00      	nop
 8002bec:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d015      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002bfc:	4b29      	ldr	r3, [pc, #164]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c02:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0a:	4926      	ldr	r1, [pc, #152]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c1a:	d105      	bne.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c1c:	4b21      	ldr	r3, [pc, #132]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	4a20      	ldr	r2, [pc, #128]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c26:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d015      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002c34:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c3a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c42:	4918      	ldr	r1, [pc, #96]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c52:	d105      	bne.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c54:	4b13      	ldr	r3, [pc, #76]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	4a12      	ldr	r2, [pc, #72]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c5e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d015      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c7a:	490a      	ldr	r1, [pc, #40]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c8a:	d105      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c8c:	4b05      	ldr	r3, [pc, #20]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	4a04      	ldr	r2, [pc, #16]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c96:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002c98:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000

08002ca8 <std>:
 8002ca8:	2300      	movs	r3, #0
 8002caa:	b510      	push	{r4, lr}
 8002cac:	4604      	mov	r4, r0
 8002cae:	e9c0 3300 	strd	r3, r3, [r0]
 8002cb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002cb6:	6083      	str	r3, [r0, #8]
 8002cb8:	8181      	strh	r1, [r0, #12]
 8002cba:	6643      	str	r3, [r0, #100]	@ 0x64
 8002cbc:	81c2      	strh	r2, [r0, #14]
 8002cbe:	6183      	str	r3, [r0, #24]
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	2208      	movs	r2, #8
 8002cc4:	305c      	adds	r0, #92	@ 0x5c
 8002cc6:	f000 f9f9 	bl	80030bc <memset>
 8002cca:	4b0d      	ldr	r3, [pc, #52]	@ (8002d00 <std+0x58>)
 8002ccc:	6263      	str	r3, [r4, #36]	@ 0x24
 8002cce:	4b0d      	ldr	r3, [pc, #52]	@ (8002d04 <std+0x5c>)
 8002cd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002d08 <std+0x60>)
 8002cd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8002d0c <std+0x64>)
 8002cd8:	6323      	str	r3, [r4, #48]	@ 0x30
 8002cda:	4b0d      	ldr	r3, [pc, #52]	@ (8002d10 <std+0x68>)
 8002cdc:	6224      	str	r4, [r4, #32]
 8002cde:	429c      	cmp	r4, r3
 8002ce0:	d006      	beq.n	8002cf0 <std+0x48>
 8002ce2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002ce6:	4294      	cmp	r4, r2
 8002ce8:	d002      	beq.n	8002cf0 <std+0x48>
 8002cea:	33d0      	adds	r3, #208	@ 0xd0
 8002cec:	429c      	cmp	r4, r3
 8002cee:	d105      	bne.n	8002cfc <std+0x54>
 8002cf0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cf8:	f000 ba58 	b.w	80031ac <__retarget_lock_init_recursive>
 8002cfc:	bd10      	pop	{r4, pc}
 8002cfe:	bf00      	nop
 8002d00:	08002f0d 	.word	0x08002f0d
 8002d04:	08002f2f 	.word	0x08002f2f
 8002d08:	08002f67 	.word	0x08002f67
 8002d0c:	08002f8b 	.word	0x08002f8b
 8002d10:	2000014c 	.word	0x2000014c

08002d14 <stdio_exit_handler>:
 8002d14:	4a02      	ldr	r2, [pc, #8]	@ (8002d20 <stdio_exit_handler+0xc>)
 8002d16:	4903      	ldr	r1, [pc, #12]	@ (8002d24 <stdio_exit_handler+0x10>)
 8002d18:	4803      	ldr	r0, [pc, #12]	@ (8002d28 <stdio_exit_handler+0x14>)
 8002d1a:	f000 b869 	b.w	8002df0 <_fwalk_sglue>
 8002d1e:	bf00      	nop
 8002d20:	2000000c 	.word	0x2000000c
 8002d24:	08003a4d 	.word	0x08003a4d
 8002d28:	2000001c 	.word	0x2000001c

08002d2c <cleanup_stdio>:
 8002d2c:	6841      	ldr	r1, [r0, #4]
 8002d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d60 <cleanup_stdio+0x34>)
 8002d30:	4299      	cmp	r1, r3
 8002d32:	b510      	push	{r4, lr}
 8002d34:	4604      	mov	r4, r0
 8002d36:	d001      	beq.n	8002d3c <cleanup_stdio+0x10>
 8002d38:	f000 fe88 	bl	8003a4c <_fflush_r>
 8002d3c:	68a1      	ldr	r1, [r4, #8]
 8002d3e:	4b09      	ldr	r3, [pc, #36]	@ (8002d64 <cleanup_stdio+0x38>)
 8002d40:	4299      	cmp	r1, r3
 8002d42:	d002      	beq.n	8002d4a <cleanup_stdio+0x1e>
 8002d44:	4620      	mov	r0, r4
 8002d46:	f000 fe81 	bl	8003a4c <_fflush_r>
 8002d4a:	68e1      	ldr	r1, [r4, #12]
 8002d4c:	4b06      	ldr	r3, [pc, #24]	@ (8002d68 <cleanup_stdio+0x3c>)
 8002d4e:	4299      	cmp	r1, r3
 8002d50:	d004      	beq.n	8002d5c <cleanup_stdio+0x30>
 8002d52:	4620      	mov	r0, r4
 8002d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d58:	f000 be78 	b.w	8003a4c <_fflush_r>
 8002d5c:	bd10      	pop	{r4, pc}
 8002d5e:	bf00      	nop
 8002d60:	2000014c 	.word	0x2000014c
 8002d64:	200001b4 	.word	0x200001b4
 8002d68:	2000021c 	.word	0x2000021c

08002d6c <global_stdio_init.part.0>:
 8002d6c:	b510      	push	{r4, lr}
 8002d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d9c <global_stdio_init.part.0+0x30>)
 8002d70:	4c0b      	ldr	r4, [pc, #44]	@ (8002da0 <global_stdio_init.part.0+0x34>)
 8002d72:	4a0c      	ldr	r2, [pc, #48]	@ (8002da4 <global_stdio_init.part.0+0x38>)
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	4620      	mov	r0, r4
 8002d78:	2200      	movs	r2, #0
 8002d7a:	2104      	movs	r1, #4
 8002d7c:	f7ff ff94 	bl	8002ca8 <std>
 8002d80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002d84:	2201      	movs	r2, #1
 8002d86:	2109      	movs	r1, #9
 8002d88:	f7ff ff8e 	bl	8002ca8 <std>
 8002d8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002d90:	2202      	movs	r2, #2
 8002d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d96:	2112      	movs	r1, #18
 8002d98:	f7ff bf86 	b.w	8002ca8 <std>
 8002d9c:	20000284 	.word	0x20000284
 8002da0:	2000014c 	.word	0x2000014c
 8002da4:	08002d15 	.word	0x08002d15

08002da8 <__sfp_lock_acquire>:
 8002da8:	4801      	ldr	r0, [pc, #4]	@ (8002db0 <__sfp_lock_acquire+0x8>)
 8002daa:	f000 ba00 	b.w	80031ae <__retarget_lock_acquire_recursive>
 8002dae:	bf00      	nop
 8002db0:	2000028d 	.word	0x2000028d

08002db4 <__sfp_lock_release>:
 8002db4:	4801      	ldr	r0, [pc, #4]	@ (8002dbc <__sfp_lock_release+0x8>)
 8002db6:	f000 b9fb 	b.w	80031b0 <__retarget_lock_release_recursive>
 8002dba:	bf00      	nop
 8002dbc:	2000028d 	.word	0x2000028d

08002dc0 <__sinit>:
 8002dc0:	b510      	push	{r4, lr}
 8002dc2:	4604      	mov	r4, r0
 8002dc4:	f7ff fff0 	bl	8002da8 <__sfp_lock_acquire>
 8002dc8:	6a23      	ldr	r3, [r4, #32]
 8002dca:	b11b      	cbz	r3, 8002dd4 <__sinit+0x14>
 8002dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dd0:	f7ff bff0 	b.w	8002db4 <__sfp_lock_release>
 8002dd4:	4b04      	ldr	r3, [pc, #16]	@ (8002de8 <__sinit+0x28>)
 8002dd6:	6223      	str	r3, [r4, #32]
 8002dd8:	4b04      	ldr	r3, [pc, #16]	@ (8002dec <__sinit+0x2c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1f5      	bne.n	8002dcc <__sinit+0xc>
 8002de0:	f7ff ffc4 	bl	8002d6c <global_stdio_init.part.0>
 8002de4:	e7f2      	b.n	8002dcc <__sinit+0xc>
 8002de6:	bf00      	nop
 8002de8:	08002d2d 	.word	0x08002d2d
 8002dec:	20000284 	.word	0x20000284

08002df0 <_fwalk_sglue>:
 8002df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002df4:	4607      	mov	r7, r0
 8002df6:	4688      	mov	r8, r1
 8002df8:	4614      	mov	r4, r2
 8002dfa:	2600      	movs	r6, #0
 8002dfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002e00:	f1b9 0901 	subs.w	r9, r9, #1
 8002e04:	d505      	bpl.n	8002e12 <_fwalk_sglue+0x22>
 8002e06:	6824      	ldr	r4, [r4, #0]
 8002e08:	2c00      	cmp	r4, #0
 8002e0a:	d1f7      	bne.n	8002dfc <_fwalk_sglue+0xc>
 8002e0c:	4630      	mov	r0, r6
 8002e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e12:	89ab      	ldrh	r3, [r5, #12]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d907      	bls.n	8002e28 <_fwalk_sglue+0x38>
 8002e18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	d003      	beq.n	8002e28 <_fwalk_sglue+0x38>
 8002e20:	4629      	mov	r1, r5
 8002e22:	4638      	mov	r0, r7
 8002e24:	47c0      	blx	r8
 8002e26:	4306      	orrs	r6, r0
 8002e28:	3568      	adds	r5, #104	@ 0x68
 8002e2a:	e7e9      	b.n	8002e00 <_fwalk_sglue+0x10>

08002e2c <iprintf>:
 8002e2c:	b40f      	push	{r0, r1, r2, r3}
 8002e2e:	b507      	push	{r0, r1, r2, lr}
 8002e30:	4906      	ldr	r1, [pc, #24]	@ (8002e4c <iprintf+0x20>)
 8002e32:	ab04      	add	r3, sp, #16
 8002e34:	6808      	ldr	r0, [r1, #0]
 8002e36:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e3a:	6881      	ldr	r1, [r0, #8]
 8002e3c:	9301      	str	r3, [sp, #4]
 8002e3e:	f000 fadb 	bl	80033f8 <_vfiprintf_r>
 8002e42:	b003      	add	sp, #12
 8002e44:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e48:	b004      	add	sp, #16
 8002e4a:	4770      	bx	lr
 8002e4c:	20000018 	.word	0x20000018

08002e50 <_puts_r>:
 8002e50:	6a03      	ldr	r3, [r0, #32]
 8002e52:	b570      	push	{r4, r5, r6, lr}
 8002e54:	6884      	ldr	r4, [r0, #8]
 8002e56:	4605      	mov	r5, r0
 8002e58:	460e      	mov	r6, r1
 8002e5a:	b90b      	cbnz	r3, 8002e60 <_puts_r+0x10>
 8002e5c:	f7ff ffb0 	bl	8002dc0 <__sinit>
 8002e60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002e62:	07db      	lsls	r3, r3, #31
 8002e64:	d405      	bmi.n	8002e72 <_puts_r+0x22>
 8002e66:	89a3      	ldrh	r3, [r4, #12]
 8002e68:	0598      	lsls	r0, r3, #22
 8002e6a:	d402      	bmi.n	8002e72 <_puts_r+0x22>
 8002e6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e6e:	f000 f99e 	bl	80031ae <__retarget_lock_acquire_recursive>
 8002e72:	89a3      	ldrh	r3, [r4, #12]
 8002e74:	0719      	lsls	r1, r3, #28
 8002e76:	d502      	bpl.n	8002e7e <_puts_r+0x2e>
 8002e78:	6923      	ldr	r3, [r4, #16]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d135      	bne.n	8002eea <_puts_r+0x9a>
 8002e7e:	4621      	mov	r1, r4
 8002e80:	4628      	mov	r0, r5
 8002e82:	f000 f8c5 	bl	8003010 <__swsetup_r>
 8002e86:	b380      	cbz	r0, 8002eea <_puts_r+0x9a>
 8002e88:	f04f 35ff 	mov.w	r5, #4294967295
 8002e8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002e8e:	07da      	lsls	r2, r3, #31
 8002e90:	d405      	bmi.n	8002e9e <_puts_r+0x4e>
 8002e92:	89a3      	ldrh	r3, [r4, #12]
 8002e94:	059b      	lsls	r3, r3, #22
 8002e96:	d402      	bmi.n	8002e9e <_puts_r+0x4e>
 8002e98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e9a:	f000 f989 	bl	80031b0 <__retarget_lock_release_recursive>
 8002e9e:	4628      	mov	r0, r5
 8002ea0:	bd70      	pop	{r4, r5, r6, pc}
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	da04      	bge.n	8002eb0 <_puts_r+0x60>
 8002ea6:	69a2      	ldr	r2, [r4, #24]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	dc17      	bgt.n	8002edc <_puts_r+0x8c>
 8002eac:	290a      	cmp	r1, #10
 8002eae:	d015      	beq.n	8002edc <_puts_r+0x8c>
 8002eb0:	6823      	ldr	r3, [r4, #0]
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	6022      	str	r2, [r4, #0]
 8002eb6:	7019      	strb	r1, [r3, #0]
 8002eb8:	68a3      	ldr	r3, [r4, #8]
 8002eba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	60a3      	str	r3, [r4, #8]
 8002ec2:	2900      	cmp	r1, #0
 8002ec4:	d1ed      	bne.n	8002ea2 <_puts_r+0x52>
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	da11      	bge.n	8002eee <_puts_r+0x9e>
 8002eca:	4622      	mov	r2, r4
 8002ecc:	210a      	movs	r1, #10
 8002ece:	4628      	mov	r0, r5
 8002ed0:	f000 f85f 	bl	8002f92 <__swbuf_r>
 8002ed4:	3001      	adds	r0, #1
 8002ed6:	d0d7      	beq.n	8002e88 <_puts_r+0x38>
 8002ed8:	250a      	movs	r5, #10
 8002eda:	e7d7      	b.n	8002e8c <_puts_r+0x3c>
 8002edc:	4622      	mov	r2, r4
 8002ede:	4628      	mov	r0, r5
 8002ee0:	f000 f857 	bl	8002f92 <__swbuf_r>
 8002ee4:	3001      	adds	r0, #1
 8002ee6:	d1e7      	bne.n	8002eb8 <_puts_r+0x68>
 8002ee8:	e7ce      	b.n	8002e88 <_puts_r+0x38>
 8002eea:	3e01      	subs	r6, #1
 8002eec:	e7e4      	b.n	8002eb8 <_puts_r+0x68>
 8002eee:	6823      	ldr	r3, [r4, #0]
 8002ef0:	1c5a      	adds	r2, r3, #1
 8002ef2:	6022      	str	r2, [r4, #0]
 8002ef4:	220a      	movs	r2, #10
 8002ef6:	701a      	strb	r2, [r3, #0]
 8002ef8:	e7ee      	b.n	8002ed8 <_puts_r+0x88>
	...

08002efc <puts>:
 8002efc:	4b02      	ldr	r3, [pc, #8]	@ (8002f08 <puts+0xc>)
 8002efe:	4601      	mov	r1, r0
 8002f00:	6818      	ldr	r0, [r3, #0]
 8002f02:	f7ff bfa5 	b.w	8002e50 <_puts_r>
 8002f06:	bf00      	nop
 8002f08:	20000018 	.word	0x20000018

08002f0c <__sread>:
 8002f0c:	b510      	push	{r4, lr}
 8002f0e:	460c      	mov	r4, r1
 8002f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f14:	f000 f8fc 	bl	8003110 <_read_r>
 8002f18:	2800      	cmp	r0, #0
 8002f1a:	bfab      	itete	ge
 8002f1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002f1e:	89a3      	ldrhlt	r3, [r4, #12]
 8002f20:	181b      	addge	r3, r3, r0
 8002f22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002f26:	bfac      	ite	ge
 8002f28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002f2a:	81a3      	strhlt	r3, [r4, #12]
 8002f2c:	bd10      	pop	{r4, pc}

08002f2e <__swrite>:
 8002f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f32:	461f      	mov	r7, r3
 8002f34:	898b      	ldrh	r3, [r1, #12]
 8002f36:	05db      	lsls	r3, r3, #23
 8002f38:	4605      	mov	r5, r0
 8002f3a:	460c      	mov	r4, r1
 8002f3c:	4616      	mov	r6, r2
 8002f3e:	d505      	bpl.n	8002f4c <__swrite+0x1e>
 8002f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f44:	2302      	movs	r3, #2
 8002f46:	2200      	movs	r2, #0
 8002f48:	f000 f8d0 	bl	80030ec <_lseek_r>
 8002f4c:	89a3      	ldrh	r3, [r4, #12]
 8002f4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f56:	81a3      	strh	r3, [r4, #12]
 8002f58:	4632      	mov	r2, r6
 8002f5a:	463b      	mov	r3, r7
 8002f5c:	4628      	mov	r0, r5
 8002f5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f62:	f000 b8e7 	b.w	8003134 <_write_r>

08002f66 <__sseek>:
 8002f66:	b510      	push	{r4, lr}
 8002f68:	460c      	mov	r4, r1
 8002f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f6e:	f000 f8bd 	bl	80030ec <_lseek_r>
 8002f72:	1c43      	adds	r3, r0, #1
 8002f74:	89a3      	ldrh	r3, [r4, #12]
 8002f76:	bf15      	itete	ne
 8002f78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002f7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002f7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002f82:	81a3      	strheq	r3, [r4, #12]
 8002f84:	bf18      	it	ne
 8002f86:	81a3      	strhne	r3, [r4, #12]
 8002f88:	bd10      	pop	{r4, pc}

08002f8a <__sclose>:
 8002f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f8e:	f000 b89d 	b.w	80030cc <_close_r>

08002f92 <__swbuf_r>:
 8002f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f94:	460e      	mov	r6, r1
 8002f96:	4614      	mov	r4, r2
 8002f98:	4605      	mov	r5, r0
 8002f9a:	b118      	cbz	r0, 8002fa4 <__swbuf_r+0x12>
 8002f9c:	6a03      	ldr	r3, [r0, #32]
 8002f9e:	b90b      	cbnz	r3, 8002fa4 <__swbuf_r+0x12>
 8002fa0:	f7ff ff0e 	bl	8002dc0 <__sinit>
 8002fa4:	69a3      	ldr	r3, [r4, #24]
 8002fa6:	60a3      	str	r3, [r4, #8]
 8002fa8:	89a3      	ldrh	r3, [r4, #12]
 8002faa:	071a      	lsls	r2, r3, #28
 8002fac:	d501      	bpl.n	8002fb2 <__swbuf_r+0x20>
 8002fae:	6923      	ldr	r3, [r4, #16]
 8002fb0:	b943      	cbnz	r3, 8002fc4 <__swbuf_r+0x32>
 8002fb2:	4621      	mov	r1, r4
 8002fb4:	4628      	mov	r0, r5
 8002fb6:	f000 f82b 	bl	8003010 <__swsetup_r>
 8002fba:	b118      	cbz	r0, 8002fc4 <__swbuf_r+0x32>
 8002fbc:	f04f 37ff 	mov.w	r7, #4294967295
 8002fc0:	4638      	mov	r0, r7
 8002fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fc4:	6823      	ldr	r3, [r4, #0]
 8002fc6:	6922      	ldr	r2, [r4, #16]
 8002fc8:	1a98      	subs	r0, r3, r2
 8002fca:	6963      	ldr	r3, [r4, #20]
 8002fcc:	b2f6      	uxtb	r6, r6
 8002fce:	4283      	cmp	r3, r0
 8002fd0:	4637      	mov	r7, r6
 8002fd2:	dc05      	bgt.n	8002fe0 <__swbuf_r+0x4e>
 8002fd4:	4621      	mov	r1, r4
 8002fd6:	4628      	mov	r0, r5
 8002fd8:	f000 fd38 	bl	8003a4c <_fflush_r>
 8002fdc:	2800      	cmp	r0, #0
 8002fde:	d1ed      	bne.n	8002fbc <__swbuf_r+0x2a>
 8002fe0:	68a3      	ldr	r3, [r4, #8]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	60a3      	str	r3, [r4, #8]
 8002fe6:	6823      	ldr	r3, [r4, #0]
 8002fe8:	1c5a      	adds	r2, r3, #1
 8002fea:	6022      	str	r2, [r4, #0]
 8002fec:	701e      	strb	r6, [r3, #0]
 8002fee:	6962      	ldr	r2, [r4, #20]
 8002ff0:	1c43      	adds	r3, r0, #1
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d004      	beq.n	8003000 <__swbuf_r+0x6e>
 8002ff6:	89a3      	ldrh	r3, [r4, #12]
 8002ff8:	07db      	lsls	r3, r3, #31
 8002ffa:	d5e1      	bpl.n	8002fc0 <__swbuf_r+0x2e>
 8002ffc:	2e0a      	cmp	r6, #10
 8002ffe:	d1df      	bne.n	8002fc0 <__swbuf_r+0x2e>
 8003000:	4621      	mov	r1, r4
 8003002:	4628      	mov	r0, r5
 8003004:	f000 fd22 	bl	8003a4c <_fflush_r>
 8003008:	2800      	cmp	r0, #0
 800300a:	d0d9      	beq.n	8002fc0 <__swbuf_r+0x2e>
 800300c:	e7d6      	b.n	8002fbc <__swbuf_r+0x2a>
	...

08003010 <__swsetup_r>:
 8003010:	b538      	push	{r3, r4, r5, lr}
 8003012:	4b29      	ldr	r3, [pc, #164]	@ (80030b8 <__swsetup_r+0xa8>)
 8003014:	4605      	mov	r5, r0
 8003016:	6818      	ldr	r0, [r3, #0]
 8003018:	460c      	mov	r4, r1
 800301a:	b118      	cbz	r0, 8003024 <__swsetup_r+0x14>
 800301c:	6a03      	ldr	r3, [r0, #32]
 800301e:	b90b      	cbnz	r3, 8003024 <__swsetup_r+0x14>
 8003020:	f7ff fece 	bl	8002dc0 <__sinit>
 8003024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003028:	0719      	lsls	r1, r3, #28
 800302a:	d422      	bmi.n	8003072 <__swsetup_r+0x62>
 800302c:	06da      	lsls	r2, r3, #27
 800302e:	d407      	bmi.n	8003040 <__swsetup_r+0x30>
 8003030:	2209      	movs	r2, #9
 8003032:	602a      	str	r2, [r5, #0]
 8003034:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003038:	81a3      	strh	r3, [r4, #12]
 800303a:	f04f 30ff 	mov.w	r0, #4294967295
 800303e:	e033      	b.n	80030a8 <__swsetup_r+0x98>
 8003040:	0758      	lsls	r0, r3, #29
 8003042:	d512      	bpl.n	800306a <__swsetup_r+0x5a>
 8003044:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003046:	b141      	cbz	r1, 800305a <__swsetup_r+0x4a>
 8003048:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800304c:	4299      	cmp	r1, r3
 800304e:	d002      	beq.n	8003056 <__swsetup_r+0x46>
 8003050:	4628      	mov	r0, r5
 8003052:	f000 f8af 	bl	80031b4 <_free_r>
 8003056:	2300      	movs	r3, #0
 8003058:	6363      	str	r3, [r4, #52]	@ 0x34
 800305a:	89a3      	ldrh	r3, [r4, #12]
 800305c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003060:	81a3      	strh	r3, [r4, #12]
 8003062:	2300      	movs	r3, #0
 8003064:	6063      	str	r3, [r4, #4]
 8003066:	6923      	ldr	r3, [r4, #16]
 8003068:	6023      	str	r3, [r4, #0]
 800306a:	89a3      	ldrh	r3, [r4, #12]
 800306c:	f043 0308 	orr.w	r3, r3, #8
 8003070:	81a3      	strh	r3, [r4, #12]
 8003072:	6923      	ldr	r3, [r4, #16]
 8003074:	b94b      	cbnz	r3, 800308a <__swsetup_r+0x7a>
 8003076:	89a3      	ldrh	r3, [r4, #12]
 8003078:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800307c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003080:	d003      	beq.n	800308a <__swsetup_r+0x7a>
 8003082:	4621      	mov	r1, r4
 8003084:	4628      	mov	r0, r5
 8003086:	f000 fd2f 	bl	8003ae8 <__smakebuf_r>
 800308a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800308e:	f013 0201 	ands.w	r2, r3, #1
 8003092:	d00a      	beq.n	80030aa <__swsetup_r+0x9a>
 8003094:	2200      	movs	r2, #0
 8003096:	60a2      	str	r2, [r4, #8]
 8003098:	6962      	ldr	r2, [r4, #20]
 800309a:	4252      	negs	r2, r2
 800309c:	61a2      	str	r2, [r4, #24]
 800309e:	6922      	ldr	r2, [r4, #16]
 80030a0:	b942      	cbnz	r2, 80030b4 <__swsetup_r+0xa4>
 80030a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80030a6:	d1c5      	bne.n	8003034 <__swsetup_r+0x24>
 80030a8:	bd38      	pop	{r3, r4, r5, pc}
 80030aa:	0799      	lsls	r1, r3, #30
 80030ac:	bf58      	it	pl
 80030ae:	6962      	ldrpl	r2, [r4, #20]
 80030b0:	60a2      	str	r2, [r4, #8]
 80030b2:	e7f4      	b.n	800309e <__swsetup_r+0x8e>
 80030b4:	2000      	movs	r0, #0
 80030b6:	e7f7      	b.n	80030a8 <__swsetup_r+0x98>
 80030b8:	20000018 	.word	0x20000018

080030bc <memset>:
 80030bc:	4402      	add	r2, r0
 80030be:	4603      	mov	r3, r0
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d100      	bne.n	80030c6 <memset+0xa>
 80030c4:	4770      	bx	lr
 80030c6:	f803 1b01 	strb.w	r1, [r3], #1
 80030ca:	e7f9      	b.n	80030c0 <memset+0x4>

080030cc <_close_r>:
 80030cc:	b538      	push	{r3, r4, r5, lr}
 80030ce:	4d06      	ldr	r5, [pc, #24]	@ (80030e8 <_close_r+0x1c>)
 80030d0:	2300      	movs	r3, #0
 80030d2:	4604      	mov	r4, r0
 80030d4:	4608      	mov	r0, r1
 80030d6:	602b      	str	r3, [r5, #0]
 80030d8:	f7fd fc19 	bl	800090e <_close>
 80030dc:	1c43      	adds	r3, r0, #1
 80030de:	d102      	bne.n	80030e6 <_close_r+0x1a>
 80030e0:	682b      	ldr	r3, [r5, #0]
 80030e2:	b103      	cbz	r3, 80030e6 <_close_r+0x1a>
 80030e4:	6023      	str	r3, [r4, #0]
 80030e6:	bd38      	pop	{r3, r4, r5, pc}
 80030e8:	20000288 	.word	0x20000288

080030ec <_lseek_r>:
 80030ec:	b538      	push	{r3, r4, r5, lr}
 80030ee:	4d07      	ldr	r5, [pc, #28]	@ (800310c <_lseek_r+0x20>)
 80030f0:	4604      	mov	r4, r0
 80030f2:	4608      	mov	r0, r1
 80030f4:	4611      	mov	r1, r2
 80030f6:	2200      	movs	r2, #0
 80030f8:	602a      	str	r2, [r5, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	f7fd fc2e 	bl	800095c <_lseek>
 8003100:	1c43      	adds	r3, r0, #1
 8003102:	d102      	bne.n	800310a <_lseek_r+0x1e>
 8003104:	682b      	ldr	r3, [r5, #0]
 8003106:	b103      	cbz	r3, 800310a <_lseek_r+0x1e>
 8003108:	6023      	str	r3, [r4, #0]
 800310a:	bd38      	pop	{r3, r4, r5, pc}
 800310c:	20000288 	.word	0x20000288

08003110 <_read_r>:
 8003110:	b538      	push	{r3, r4, r5, lr}
 8003112:	4d07      	ldr	r5, [pc, #28]	@ (8003130 <_read_r+0x20>)
 8003114:	4604      	mov	r4, r0
 8003116:	4608      	mov	r0, r1
 8003118:	4611      	mov	r1, r2
 800311a:	2200      	movs	r2, #0
 800311c:	602a      	str	r2, [r5, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	f7fd fbbc 	bl	800089c <_read>
 8003124:	1c43      	adds	r3, r0, #1
 8003126:	d102      	bne.n	800312e <_read_r+0x1e>
 8003128:	682b      	ldr	r3, [r5, #0]
 800312a:	b103      	cbz	r3, 800312e <_read_r+0x1e>
 800312c:	6023      	str	r3, [r4, #0]
 800312e:	bd38      	pop	{r3, r4, r5, pc}
 8003130:	20000288 	.word	0x20000288

08003134 <_write_r>:
 8003134:	b538      	push	{r3, r4, r5, lr}
 8003136:	4d07      	ldr	r5, [pc, #28]	@ (8003154 <_write_r+0x20>)
 8003138:	4604      	mov	r4, r0
 800313a:	4608      	mov	r0, r1
 800313c:	4611      	mov	r1, r2
 800313e:	2200      	movs	r2, #0
 8003140:	602a      	str	r2, [r5, #0]
 8003142:	461a      	mov	r2, r3
 8003144:	f7fd fbc7 	bl	80008d6 <_write>
 8003148:	1c43      	adds	r3, r0, #1
 800314a:	d102      	bne.n	8003152 <_write_r+0x1e>
 800314c:	682b      	ldr	r3, [r5, #0]
 800314e:	b103      	cbz	r3, 8003152 <_write_r+0x1e>
 8003150:	6023      	str	r3, [r4, #0]
 8003152:	bd38      	pop	{r3, r4, r5, pc}
 8003154:	20000288 	.word	0x20000288

08003158 <__errno>:
 8003158:	4b01      	ldr	r3, [pc, #4]	@ (8003160 <__errno+0x8>)
 800315a:	6818      	ldr	r0, [r3, #0]
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	20000018 	.word	0x20000018

08003164 <__libc_init_array>:
 8003164:	b570      	push	{r4, r5, r6, lr}
 8003166:	4d0d      	ldr	r5, [pc, #52]	@ (800319c <__libc_init_array+0x38>)
 8003168:	4c0d      	ldr	r4, [pc, #52]	@ (80031a0 <__libc_init_array+0x3c>)
 800316a:	1b64      	subs	r4, r4, r5
 800316c:	10a4      	asrs	r4, r4, #2
 800316e:	2600      	movs	r6, #0
 8003170:	42a6      	cmp	r6, r4
 8003172:	d109      	bne.n	8003188 <__libc_init_array+0x24>
 8003174:	4d0b      	ldr	r5, [pc, #44]	@ (80031a4 <__libc_init_array+0x40>)
 8003176:	4c0c      	ldr	r4, [pc, #48]	@ (80031a8 <__libc_init_array+0x44>)
 8003178:	f000 fd24 	bl	8003bc4 <_init>
 800317c:	1b64      	subs	r4, r4, r5
 800317e:	10a4      	asrs	r4, r4, #2
 8003180:	2600      	movs	r6, #0
 8003182:	42a6      	cmp	r6, r4
 8003184:	d105      	bne.n	8003192 <__libc_init_array+0x2e>
 8003186:	bd70      	pop	{r4, r5, r6, pc}
 8003188:	f855 3b04 	ldr.w	r3, [r5], #4
 800318c:	4798      	blx	r3
 800318e:	3601      	adds	r6, #1
 8003190:	e7ee      	b.n	8003170 <__libc_init_array+0xc>
 8003192:	f855 3b04 	ldr.w	r3, [r5], #4
 8003196:	4798      	blx	r3
 8003198:	3601      	adds	r6, #1
 800319a:	e7f2      	b.n	8003182 <__libc_init_array+0x1e>
 800319c:	08003ca0 	.word	0x08003ca0
 80031a0:	08003ca0 	.word	0x08003ca0
 80031a4:	08003ca0 	.word	0x08003ca0
 80031a8:	08003ca4 	.word	0x08003ca4

080031ac <__retarget_lock_init_recursive>:
 80031ac:	4770      	bx	lr

080031ae <__retarget_lock_acquire_recursive>:
 80031ae:	4770      	bx	lr

080031b0 <__retarget_lock_release_recursive>:
 80031b0:	4770      	bx	lr
	...

080031b4 <_free_r>:
 80031b4:	b538      	push	{r3, r4, r5, lr}
 80031b6:	4605      	mov	r5, r0
 80031b8:	2900      	cmp	r1, #0
 80031ba:	d041      	beq.n	8003240 <_free_r+0x8c>
 80031bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031c0:	1f0c      	subs	r4, r1, #4
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	bfb8      	it	lt
 80031c6:	18e4      	addlt	r4, r4, r3
 80031c8:	f000 f8e0 	bl	800338c <__malloc_lock>
 80031cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003244 <_free_r+0x90>)
 80031ce:	6813      	ldr	r3, [r2, #0]
 80031d0:	b933      	cbnz	r3, 80031e0 <_free_r+0x2c>
 80031d2:	6063      	str	r3, [r4, #4]
 80031d4:	6014      	str	r4, [r2, #0]
 80031d6:	4628      	mov	r0, r5
 80031d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031dc:	f000 b8dc 	b.w	8003398 <__malloc_unlock>
 80031e0:	42a3      	cmp	r3, r4
 80031e2:	d908      	bls.n	80031f6 <_free_r+0x42>
 80031e4:	6820      	ldr	r0, [r4, #0]
 80031e6:	1821      	adds	r1, r4, r0
 80031e8:	428b      	cmp	r3, r1
 80031ea:	bf01      	itttt	eq
 80031ec:	6819      	ldreq	r1, [r3, #0]
 80031ee:	685b      	ldreq	r3, [r3, #4]
 80031f0:	1809      	addeq	r1, r1, r0
 80031f2:	6021      	streq	r1, [r4, #0]
 80031f4:	e7ed      	b.n	80031d2 <_free_r+0x1e>
 80031f6:	461a      	mov	r2, r3
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	b10b      	cbz	r3, 8003200 <_free_r+0x4c>
 80031fc:	42a3      	cmp	r3, r4
 80031fe:	d9fa      	bls.n	80031f6 <_free_r+0x42>
 8003200:	6811      	ldr	r1, [r2, #0]
 8003202:	1850      	adds	r0, r2, r1
 8003204:	42a0      	cmp	r0, r4
 8003206:	d10b      	bne.n	8003220 <_free_r+0x6c>
 8003208:	6820      	ldr	r0, [r4, #0]
 800320a:	4401      	add	r1, r0
 800320c:	1850      	adds	r0, r2, r1
 800320e:	4283      	cmp	r3, r0
 8003210:	6011      	str	r1, [r2, #0]
 8003212:	d1e0      	bne.n	80031d6 <_free_r+0x22>
 8003214:	6818      	ldr	r0, [r3, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	6053      	str	r3, [r2, #4]
 800321a:	4408      	add	r0, r1
 800321c:	6010      	str	r0, [r2, #0]
 800321e:	e7da      	b.n	80031d6 <_free_r+0x22>
 8003220:	d902      	bls.n	8003228 <_free_r+0x74>
 8003222:	230c      	movs	r3, #12
 8003224:	602b      	str	r3, [r5, #0]
 8003226:	e7d6      	b.n	80031d6 <_free_r+0x22>
 8003228:	6820      	ldr	r0, [r4, #0]
 800322a:	1821      	adds	r1, r4, r0
 800322c:	428b      	cmp	r3, r1
 800322e:	bf04      	itt	eq
 8003230:	6819      	ldreq	r1, [r3, #0]
 8003232:	685b      	ldreq	r3, [r3, #4]
 8003234:	6063      	str	r3, [r4, #4]
 8003236:	bf04      	itt	eq
 8003238:	1809      	addeq	r1, r1, r0
 800323a:	6021      	streq	r1, [r4, #0]
 800323c:	6054      	str	r4, [r2, #4]
 800323e:	e7ca      	b.n	80031d6 <_free_r+0x22>
 8003240:	bd38      	pop	{r3, r4, r5, pc}
 8003242:	bf00      	nop
 8003244:	20000294 	.word	0x20000294

08003248 <sbrk_aligned>:
 8003248:	b570      	push	{r4, r5, r6, lr}
 800324a:	4e0f      	ldr	r6, [pc, #60]	@ (8003288 <sbrk_aligned+0x40>)
 800324c:	460c      	mov	r4, r1
 800324e:	6831      	ldr	r1, [r6, #0]
 8003250:	4605      	mov	r5, r0
 8003252:	b911      	cbnz	r1, 800325a <sbrk_aligned+0x12>
 8003254:	f000 fca6 	bl	8003ba4 <_sbrk_r>
 8003258:	6030      	str	r0, [r6, #0]
 800325a:	4621      	mov	r1, r4
 800325c:	4628      	mov	r0, r5
 800325e:	f000 fca1 	bl	8003ba4 <_sbrk_r>
 8003262:	1c43      	adds	r3, r0, #1
 8003264:	d103      	bne.n	800326e <sbrk_aligned+0x26>
 8003266:	f04f 34ff 	mov.w	r4, #4294967295
 800326a:	4620      	mov	r0, r4
 800326c:	bd70      	pop	{r4, r5, r6, pc}
 800326e:	1cc4      	adds	r4, r0, #3
 8003270:	f024 0403 	bic.w	r4, r4, #3
 8003274:	42a0      	cmp	r0, r4
 8003276:	d0f8      	beq.n	800326a <sbrk_aligned+0x22>
 8003278:	1a21      	subs	r1, r4, r0
 800327a:	4628      	mov	r0, r5
 800327c:	f000 fc92 	bl	8003ba4 <_sbrk_r>
 8003280:	3001      	adds	r0, #1
 8003282:	d1f2      	bne.n	800326a <sbrk_aligned+0x22>
 8003284:	e7ef      	b.n	8003266 <sbrk_aligned+0x1e>
 8003286:	bf00      	nop
 8003288:	20000290 	.word	0x20000290

0800328c <_malloc_r>:
 800328c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003290:	1ccd      	adds	r5, r1, #3
 8003292:	f025 0503 	bic.w	r5, r5, #3
 8003296:	3508      	adds	r5, #8
 8003298:	2d0c      	cmp	r5, #12
 800329a:	bf38      	it	cc
 800329c:	250c      	movcc	r5, #12
 800329e:	2d00      	cmp	r5, #0
 80032a0:	4606      	mov	r6, r0
 80032a2:	db01      	blt.n	80032a8 <_malloc_r+0x1c>
 80032a4:	42a9      	cmp	r1, r5
 80032a6:	d904      	bls.n	80032b2 <_malloc_r+0x26>
 80032a8:	230c      	movs	r3, #12
 80032aa:	6033      	str	r3, [r6, #0]
 80032ac:	2000      	movs	r0, #0
 80032ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003388 <_malloc_r+0xfc>
 80032b6:	f000 f869 	bl	800338c <__malloc_lock>
 80032ba:	f8d8 3000 	ldr.w	r3, [r8]
 80032be:	461c      	mov	r4, r3
 80032c0:	bb44      	cbnz	r4, 8003314 <_malloc_r+0x88>
 80032c2:	4629      	mov	r1, r5
 80032c4:	4630      	mov	r0, r6
 80032c6:	f7ff ffbf 	bl	8003248 <sbrk_aligned>
 80032ca:	1c43      	adds	r3, r0, #1
 80032cc:	4604      	mov	r4, r0
 80032ce:	d158      	bne.n	8003382 <_malloc_r+0xf6>
 80032d0:	f8d8 4000 	ldr.w	r4, [r8]
 80032d4:	4627      	mov	r7, r4
 80032d6:	2f00      	cmp	r7, #0
 80032d8:	d143      	bne.n	8003362 <_malloc_r+0xd6>
 80032da:	2c00      	cmp	r4, #0
 80032dc:	d04b      	beq.n	8003376 <_malloc_r+0xea>
 80032de:	6823      	ldr	r3, [r4, #0]
 80032e0:	4639      	mov	r1, r7
 80032e2:	4630      	mov	r0, r6
 80032e4:	eb04 0903 	add.w	r9, r4, r3
 80032e8:	f000 fc5c 	bl	8003ba4 <_sbrk_r>
 80032ec:	4581      	cmp	r9, r0
 80032ee:	d142      	bne.n	8003376 <_malloc_r+0xea>
 80032f0:	6821      	ldr	r1, [r4, #0]
 80032f2:	1a6d      	subs	r5, r5, r1
 80032f4:	4629      	mov	r1, r5
 80032f6:	4630      	mov	r0, r6
 80032f8:	f7ff ffa6 	bl	8003248 <sbrk_aligned>
 80032fc:	3001      	adds	r0, #1
 80032fe:	d03a      	beq.n	8003376 <_malloc_r+0xea>
 8003300:	6823      	ldr	r3, [r4, #0]
 8003302:	442b      	add	r3, r5
 8003304:	6023      	str	r3, [r4, #0]
 8003306:	f8d8 3000 	ldr.w	r3, [r8]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	bb62      	cbnz	r2, 8003368 <_malloc_r+0xdc>
 800330e:	f8c8 7000 	str.w	r7, [r8]
 8003312:	e00f      	b.n	8003334 <_malloc_r+0xa8>
 8003314:	6822      	ldr	r2, [r4, #0]
 8003316:	1b52      	subs	r2, r2, r5
 8003318:	d420      	bmi.n	800335c <_malloc_r+0xd0>
 800331a:	2a0b      	cmp	r2, #11
 800331c:	d917      	bls.n	800334e <_malloc_r+0xc2>
 800331e:	1961      	adds	r1, r4, r5
 8003320:	42a3      	cmp	r3, r4
 8003322:	6025      	str	r5, [r4, #0]
 8003324:	bf18      	it	ne
 8003326:	6059      	strne	r1, [r3, #4]
 8003328:	6863      	ldr	r3, [r4, #4]
 800332a:	bf08      	it	eq
 800332c:	f8c8 1000 	streq.w	r1, [r8]
 8003330:	5162      	str	r2, [r4, r5]
 8003332:	604b      	str	r3, [r1, #4]
 8003334:	4630      	mov	r0, r6
 8003336:	f000 f82f 	bl	8003398 <__malloc_unlock>
 800333a:	f104 000b 	add.w	r0, r4, #11
 800333e:	1d23      	adds	r3, r4, #4
 8003340:	f020 0007 	bic.w	r0, r0, #7
 8003344:	1ac2      	subs	r2, r0, r3
 8003346:	bf1c      	itt	ne
 8003348:	1a1b      	subne	r3, r3, r0
 800334a:	50a3      	strne	r3, [r4, r2]
 800334c:	e7af      	b.n	80032ae <_malloc_r+0x22>
 800334e:	6862      	ldr	r2, [r4, #4]
 8003350:	42a3      	cmp	r3, r4
 8003352:	bf0c      	ite	eq
 8003354:	f8c8 2000 	streq.w	r2, [r8]
 8003358:	605a      	strne	r2, [r3, #4]
 800335a:	e7eb      	b.n	8003334 <_malloc_r+0xa8>
 800335c:	4623      	mov	r3, r4
 800335e:	6864      	ldr	r4, [r4, #4]
 8003360:	e7ae      	b.n	80032c0 <_malloc_r+0x34>
 8003362:	463c      	mov	r4, r7
 8003364:	687f      	ldr	r7, [r7, #4]
 8003366:	e7b6      	b.n	80032d6 <_malloc_r+0x4a>
 8003368:	461a      	mov	r2, r3
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	42a3      	cmp	r3, r4
 800336e:	d1fb      	bne.n	8003368 <_malloc_r+0xdc>
 8003370:	2300      	movs	r3, #0
 8003372:	6053      	str	r3, [r2, #4]
 8003374:	e7de      	b.n	8003334 <_malloc_r+0xa8>
 8003376:	230c      	movs	r3, #12
 8003378:	6033      	str	r3, [r6, #0]
 800337a:	4630      	mov	r0, r6
 800337c:	f000 f80c 	bl	8003398 <__malloc_unlock>
 8003380:	e794      	b.n	80032ac <_malloc_r+0x20>
 8003382:	6005      	str	r5, [r0, #0]
 8003384:	e7d6      	b.n	8003334 <_malloc_r+0xa8>
 8003386:	bf00      	nop
 8003388:	20000294 	.word	0x20000294

0800338c <__malloc_lock>:
 800338c:	4801      	ldr	r0, [pc, #4]	@ (8003394 <__malloc_lock+0x8>)
 800338e:	f7ff bf0e 	b.w	80031ae <__retarget_lock_acquire_recursive>
 8003392:	bf00      	nop
 8003394:	2000028c 	.word	0x2000028c

08003398 <__malloc_unlock>:
 8003398:	4801      	ldr	r0, [pc, #4]	@ (80033a0 <__malloc_unlock+0x8>)
 800339a:	f7ff bf09 	b.w	80031b0 <__retarget_lock_release_recursive>
 800339e:	bf00      	nop
 80033a0:	2000028c 	.word	0x2000028c

080033a4 <__sfputc_r>:
 80033a4:	6893      	ldr	r3, [r2, #8]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	b410      	push	{r4}
 80033ac:	6093      	str	r3, [r2, #8]
 80033ae:	da08      	bge.n	80033c2 <__sfputc_r+0x1e>
 80033b0:	6994      	ldr	r4, [r2, #24]
 80033b2:	42a3      	cmp	r3, r4
 80033b4:	db01      	blt.n	80033ba <__sfputc_r+0x16>
 80033b6:	290a      	cmp	r1, #10
 80033b8:	d103      	bne.n	80033c2 <__sfputc_r+0x1e>
 80033ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033be:	f7ff bde8 	b.w	8002f92 <__swbuf_r>
 80033c2:	6813      	ldr	r3, [r2, #0]
 80033c4:	1c58      	adds	r0, r3, #1
 80033c6:	6010      	str	r0, [r2, #0]
 80033c8:	7019      	strb	r1, [r3, #0]
 80033ca:	4608      	mov	r0, r1
 80033cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <__sfputs_r>:
 80033d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d4:	4606      	mov	r6, r0
 80033d6:	460f      	mov	r7, r1
 80033d8:	4614      	mov	r4, r2
 80033da:	18d5      	adds	r5, r2, r3
 80033dc:	42ac      	cmp	r4, r5
 80033de:	d101      	bne.n	80033e4 <__sfputs_r+0x12>
 80033e0:	2000      	movs	r0, #0
 80033e2:	e007      	b.n	80033f4 <__sfputs_r+0x22>
 80033e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033e8:	463a      	mov	r2, r7
 80033ea:	4630      	mov	r0, r6
 80033ec:	f7ff ffda 	bl	80033a4 <__sfputc_r>
 80033f0:	1c43      	adds	r3, r0, #1
 80033f2:	d1f3      	bne.n	80033dc <__sfputs_r+0xa>
 80033f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080033f8 <_vfiprintf_r>:
 80033f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033fc:	460d      	mov	r5, r1
 80033fe:	b09d      	sub	sp, #116	@ 0x74
 8003400:	4614      	mov	r4, r2
 8003402:	4698      	mov	r8, r3
 8003404:	4606      	mov	r6, r0
 8003406:	b118      	cbz	r0, 8003410 <_vfiprintf_r+0x18>
 8003408:	6a03      	ldr	r3, [r0, #32]
 800340a:	b90b      	cbnz	r3, 8003410 <_vfiprintf_r+0x18>
 800340c:	f7ff fcd8 	bl	8002dc0 <__sinit>
 8003410:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003412:	07d9      	lsls	r1, r3, #31
 8003414:	d405      	bmi.n	8003422 <_vfiprintf_r+0x2a>
 8003416:	89ab      	ldrh	r3, [r5, #12]
 8003418:	059a      	lsls	r2, r3, #22
 800341a:	d402      	bmi.n	8003422 <_vfiprintf_r+0x2a>
 800341c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800341e:	f7ff fec6 	bl	80031ae <__retarget_lock_acquire_recursive>
 8003422:	89ab      	ldrh	r3, [r5, #12]
 8003424:	071b      	lsls	r3, r3, #28
 8003426:	d501      	bpl.n	800342c <_vfiprintf_r+0x34>
 8003428:	692b      	ldr	r3, [r5, #16]
 800342a:	b99b      	cbnz	r3, 8003454 <_vfiprintf_r+0x5c>
 800342c:	4629      	mov	r1, r5
 800342e:	4630      	mov	r0, r6
 8003430:	f7ff fdee 	bl	8003010 <__swsetup_r>
 8003434:	b170      	cbz	r0, 8003454 <_vfiprintf_r+0x5c>
 8003436:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003438:	07dc      	lsls	r4, r3, #31
 800343a:	d504      	bpl.n	8003446 <_vfiprintf_r+0x4e>
 800343c:	f04f 30ff 	mov.w	r0, #4294967295
 8003440:	b01d      	add	sp, #116	@ 0x74
 8003442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003446:	89ab      	ldrh	r3, [r5, #12]
 8003448:	0598      	lsls	r0, r3, #22
 800344a:	d4f7      	bmi.n	800343c <_vfiprintf_r+0x44>
 800344c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800344e:	f7ff feaf 	bl	80031b0 <__retarget_lock_release_recursive>
 8003452:	e7f3      	b.n	800343c <_vfiprintf_r+0x44>
 8003454:	2300      	movs	r3, #0
 8003456:	9309      	str	r3, [sp, #36]	@ 0x24
 8003458:	2320      	movs	r3, #32
 800345a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800345e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003462:	2330      	movs	r3, #48	@ 0x30
 8003464:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003614 <_vfiprintf_r+0x21c>
 8003468:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800346c:	f04f 0901 	mov.w	r9, #1
 8003470:	4623      	mov	r3, r4
 8003472:	469a      	mov	sl, r3
 8003474:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003478:	b10a      	cbz	r2, 800347e <_vfiprintf_r+0x86>
 800347a:	2a25      	cmp	r2, #37	@ 0x25
 800347c:	d1f9      	bne.n	8003472 <_vfiprintf_r+0x7a>
 800347e:	ebba 0b04 	subs.w	fp, sl, r4
 8003482:	d00b      	beq.n	800349c <_vfiprintf_r+0xa4>
 8003484:	465b      	mov	r3, fp
 8003486:	4622      	mov	r2, r4
 8003488:	4629      	mov	r1, r5
 800348a:	4630      	mov	r0, r6
 800348c:	f7ff ffa1 	bl	80033d2 <__sfputs_r>
 8003490:	3001      	adds	r0, #1
 8003492:	f000 80a7 	beq.w	80035e4 <_vfiprintf_r+0x1ec>
 8003496:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003498:	445a      	add	r2, fp
 800349a:	9209      	str	r2, [sp, #36]	@ 0x24
 800349c:	f89a 3000 	ldrb.w	r3, [sl]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 809f 	beq.w	80035e4 <_vfiprintf_r+0x1ec>
 80034a6:	2300      	movs	r3, #0
 80034a8:	f04f 32ff 	mov.w	r2, #4294967295
 80034ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034b0:	f10a 0a01 	add.w	sl, sl, #1
 80034b4:	9304      	str	r3, [sp, #16]
 80034b6:	9307      	str	r3, [sp, #28]
 80034b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80034bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80034be:	4654      	mov	r4, sl
 80034c0:	2205      	movs	r2, #5
 80034c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034c6:	4853      	ldr	r0, [pc, #332]	@ (8003614 <_vfiprintf_r+0x21c>)
 80034c8:	f7fc feaa 	bl	8000220 <memchr>
 80034cc:	9a04      	ldr	r2, [sp, #16]
 80034ce:	b9d8      	cbnz	r0, 8003508 <_vfiprintf_r+0x110>
 80034d0:	06d1      	lsls	r1, r2, #27
 80034d2:	bf44      	itt	mi
 80034d4:	2320      	movmi	r3, #32
 80034d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80034da:	0713      	lsls	r3, r2, #28
 80034dc:	bf44      	itt	mi
 80034de:	232b      	movmi	r3, #43	@ 0x2b
 80034e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80034e4:	f89a 3000 	ldrb.w	r3, [sl]
 80034e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80034ea:	d015      	beq.n	8003518 <_vfiprintf_r+0x120>
 80034ec:	9a07      	ldr	r2, [sp, #28]
 80034ee:	4654      	mov	r4, sl
 80034f0:	2000      	movs	r0, #0
 80034f2:	f04f 0c0a 	mov.w	ip, #10
 80034f6:	4621      	mov	r1, r4
 80034f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034fc:	3b30      	subs	r3, #48	@ 0x30
 80034fe:	2b09      	cmp	r3, #9
 8003500:	d94b      	bls.n	800359a <_vfiprintf_r+0x1a2>
 8003502:	b1b0      	cbz	r0, 8003532 <_vfiprintf_r+0x13a>
 8003504:	9207      	str	r2, [sp, #28]
 8003506:	e014      	b.n	8003532 <_vfiprintf_r+0x13a>
 8003508:	eba0 0308 	sub.w	r3, r0, r8
 800350c:	fa09 f303 	lsl.w	r3, r9, r3
 8003510:	4313      	orrs	r3, r2
 8003512:	9304      	str	r3, [sp, #16]
 8003514:	46a2      	mov	sl, r4
 8003516:	e7d2      	b.n	80034be <_vfiprintf_r+0xc6>
 8003518:	9b03      	ldr	r3, [sp, #12]
 800351a:	1d19      	adds	r1, r3, #4
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	9103      	str	r1, [sp, #12]
 8003520:	2b00      	cmp	r3, #0
 8003522:	bfbb      	ittet	lt
 8003524:	425b      	neglt	r3, r3
 8003526:	f042 0202 	orrlt.w	r2, r2, #2
 800352a:	9307      	strge	r3, [sp, #28]
 800352c:	9307      	strlt	r3, [sp, #28]
 800352e:	bfb8      	it	lt
 8003530:	9204      	strlt	r2, [sp, #16]
 8003532:	7823      	ldrb	r3, [r4, #0]
 8003534:	2b2e      	cmp	r3, #46	@ 0x2e
 8003536:	d10a      	bne.n	800354e <_vfiprintf_r+0x156>
 8003538:	7863      	ldrb	r3, [r4, #1]
 800353a:	2b2a      	cmp	r3, #42	@ 0x2a
 800353c:	d132      	bne.n	80035a4 <_vfiprintf_r+0x1ac>
 800353e:	9b03      	ldr	r3, [sp, #12]
 8003540:	1d1a      	adds	r2, r3, #4
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	9203      	str	r2, [sp, #12]
 8003546:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800354a:	3402      	adds	r4, #2
 800354c:	9305      	str	r3, [sp, #20]
 800354e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003624 <_vfiprintf_r+0x22c>
 8003552:	7821      	ldrb	r1, [r4, #0]
 8003554:	2203      	movs	r2, #3
 8003556:	4650      	mov	r0, sl
 8003558:	f7fc fe62 	bl	8000220 <memchr>
 800355c:	b138      	cbz	r0, 800356e <_vfiprintf_r+0x176>
 800355e:	9b04      	ldr	r3, [sp, #16]
 8003560:	eba0 000a 	sub.w	r0, r0, sl
 8003564:	2240      	movs	r2, #64	@ 0x40
 8003566:	4082      	lsls	r2, r0
 8003568:	4313      	orrs	r3, r2
 800356a:	3401      	adds	r4, #1
 800356c:	9304      	str	r3, [sp, #16]
 800356e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003572:	4829      	ldr	r0, [pc, #164]	@ (8003618 <_vfiprintf_r+0x220>)
 8003574:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003578:	2206      	movs	r2, #6
 800357a:	f7fc fe51 	bl	8000220 <memchr>
 800357e:	2800      	cmp	r0, #0
 8003580:	d03f      	beq.n	8003602 <_vfiprintf_r+0x20a>
 8003582:	4b26      	ldr	r3, [pc, #152]	@ (800361c <_vfiprintf_r+0x224>)
 8003584:	bb1b      	cbnz	r3, 80035ce <_vfiprintf_r+0x1d6>
 8003586:	9b03      	ldr	r3, [sp, #12]
 8003588:	3307      	adds	r3, #7
 800358a:	f023 0307 	bic.w	r3, r3, #7
 800358e:	3308      	adds	r3, #8
 8003590:	9303      	str	r3, [sp, #12]
 8003592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003594:	443b      	add	r3, r7
 8003596:	9309      	str	r3, [sp, #36]	@ 0x24
 8003598:	e76a      	b.n	8003470 <_vfiprintf_r+0x78>
 800359a:	fb0c 3202 	mla	r2, ip, r2, r3
 800359e:	460c      	mov	r4, r1
 80035a0:	2001      	movs	r0, #1
 80035a2:	e7a8      	b.n	80034f6 <_vfiprintf_r+0xfe>
 80035a4:	2300      	movs	r3, #0
 80035a6:	3401      	adds	r4, #1
 80035a8:	9305      	str	r3, [sp, #20]
 80035aa:	4619      	mov	r1, r3
 80035ac:	f04f 0c0a 	mov.w	ip, #10
 80035b0:	4620      	mov	r0, r4
 80035b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035b6:	3a30      	subs	r2, #48	@ 0x30
 80035b8:	2a09      	cmp	r2, #9
 80035ba:	d903      	bls.n	80035c4 <_vfiprintf_r+0x1cc>
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0c6      	beq.n	800354e <_vfiprintf_r+0x156>
 80035c0:	9105      	str	r1, [sp, #20]
 80035c2:	e7c4      	b.n	800354e <_vfiprintf_r+0x156>
 80035c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80035c8:	4604      	mov	r4, r0
 80035ca:	2301      	movs	r3, #1
 80035cc:	e7f0      	b.n	80035b0 <_vfiprintf_r+0x1b8>
 80035ce:	ab03      	add	r3, sp, #12
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	462a      	mov	r2, r5
 80035d4:	4b12      	ldr	r3, [pc, #72]	@ (8003620 <_vfiprintf_r+0x228>)
 80035d6:	a904      	add	r1, sp, #16
 80035d8:	4630      	mov	r0, r6
 80035da:	f3af 8000 	nop.w
 80035de:	4607      	mov	r7, r0
 80035e0:	1c78      	adds	r0, r7, #1
 80035e2:	d1d6      	bne.n	8003592 <_vfiprintf_r+0x19a>
 80035e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80035e6:	07d9      	lsls	r1, r3, #31
 80035e8:	d405      	bmi.n	80035f6 <_vfiprintf_r+0x1fe>
 80035ea:	89ab      	ldrh	r3, [r5, #12]
 80035ec:	059a      	lsls	r2, r3, #22
 80035ee:	d402      	bmi.n	80035f6 <_vfiprintf_r+0x1fe>
 80035f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80035f2:	f7ff fddd 	bl	80031b0 <__retarget_lock_release_recursive>
 80035f6:	89ab      	ldrh	r3, [r5, #12]
 80035f8:	065b      	lsls	r3, r3, #25
 80035fa:	f53f af1f 	bmi.w	800343c <_vfiprintf_r+0x44>
 80035fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003600:	e71e      	b.n	8003440 <_vfiprintf_r+0x48>
 8003602:	ab03      	add	r3, sp, #12
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	462a      	mov	r2, r5
 8003608:	4b05      	ldr	r3, [pc, #20]	@ (8003620 <_vfiprintf_r+0x228>)
 800360a:	a904      	add	r1, sp, #16
 800360c:	4630      	mov	r0, r6
 800360e:	f000 f879 	bl	8003704 <_printf_i>
 8003612:	e7e4      	b.n	80035de <_vfiprintf_r+0x1e6>
 8003614:	08003c64 	.word	0x08003c64
 8003618:	08003c6e 	.word	0x08003c6e
 800361c:	00000000 	.word	0x00000000
 8003620:	080033d3 	.word	0x080033d3
 8003624:	08003c6a 	.word	0x08003c6a

08003628 <_printf_common>:
 8003628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800362c:	4616      	mov	r6, r2
 800362e:	4698      	mov	r8, r3
 8003630:	688a      	ldr	r2, [r1, #8]
 8003632:	690b      	ldr	r3, [r1, #16]
 8003634:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003638:	4293      	cmp	r3, r2
 800363a:	bfb8      	it	lt
 800363c:	4613      	movlt	r3, r2
 800363e:	6033      	str	r3, [r6, #0]
 8003640:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003644:	4607      	mov	r7, r0
 8003646:	460c      	mov	r4, r1
 8003648:	b10a      	cbz	r2, 800364e <_printf_common+0x26>
 800364a:	3301      	adds	r3, #1
 800364c:	6033      	str	r3, [r6, #0]
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	0699      	lsls	r1, r3, #26
 8003652:	bf42      	ittt	mi
 8003654:	6833      	ldrmi	r3, [r6, #0]
 8003656:	3302      	addmi	r3, #2
 8003658:	6033      	strmi	r3, [r6, #0]
 800365a:	6825      	ldr	r5, [r4, #0]
 800365c:	f015 0506 	ands.w	r5, r5, #6
 8003660:	d106      	bne.n	8003670 <_printf_common+0x48>
 8003662:	f104 0a19 	add.w	sl, r4, #25
 8003666:	68e3      	ldr	r3, [r4, #12]
 8003668:	6832      	ldr	r2, [r6, #0]
 800366a:	1a9b      	subs	r3, r3, r2
 800366c:	42ab      	cmp	r3, r5
 800366e:	dc26      	bgt.n	80036be <_printf_common+0x96>
 8003670:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003674:	6822      	ldr	r2, [r4, #0]
 8003676:	3b00      	subs	r3, #0
 8003678:	bf18      	it	ne
 800367a:	2301      	movne	r3, #1
 800367c:	0692      	lsls	r2, r2, #26
 800367e:	d42b      	bmi.n	80036d8 <_printf_common+0xb0>
 8003680:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003684:	4641      	mov	r1, r8
 8003686:	4638      	mov	r0, r7
 8003688:	47c8      	blx	r9
 800368a:	3001      	adds	r0, #1
 800368c:	d01e      	beq.n	80036cc <_printf_common+0xa4>
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	6922      	ldr	r2, [r4, #16]
 8003692:	f003 0306 	and.w	r3, r3, #6
 8003696:	2b04      	cmp	r3, #4
 8003698:	bf02      	ittt	eq
 800369a:	68e5      	ldreq	r5, [r4, #12]
 800369c:	6833      	ldreq	r3, [r6, #0]
 800369e:	1aed      	subeq	r5, r5, r3
 80036a0:	68a3      	ldr	r3, [r4, #8]
 80036a2:	bf0c      	ite	eq
 80036a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036a8:	2500      	movne	r5, #0
 80036aa:	4293      	cmp	r3, r2
 80036ac:	bfc4      	itt	gt
 80036ae:	1a9b      	subgt	r3, r3, r2
 80036b0:	18ed      	addgt	r5, r5, r3
 80036b2:	2600      	movs	r6, #0
 80036b4:	341a      	adds	r4, #26
 80036b6:	42b5      	cmp	r5, r6
 80036b8:	d11a      	bne.n	80036f0 <_printf_common+0xc8>
 80036ba:	2000      	movs	r0, #0
 80036bc:	e008      	b.n	80036d0 <_printf_common+0xa8>
 80036be:	2301      	movs	r3, #1
 80036c0:	4652      	mov	r2, sl
 80036c2:	4641      	mov	r1, r8
 80036c4:	4638      	mov	r0, r7
 80036c6:	47c8      	blx	r9
 80036c8:	3001      	adds	r0, #1
 80036ca:	d103      	bne.n	80036d4 <_printf_common+0xac>
 80036cc:	f04f 30ff 	mov.w	r0, #4294967295
 80036d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036d4:	3501      	adds	r5, #1
 80036d6:	e7c6      	b.n	8003666 <_printf_common+0x3e>
 80036d8:	18e1      	adds	r1, r4, r3
 80036da:	1c5a      	adds	r2, r3, #1
 80036dc:	2030      	movs	r0, #48	@ 0x30
 80036de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80036e2:	4422      	add	r2, r4
 80036e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80036e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80036ec:	3302      	adds	r3, #2
 80036ee:	e7c7      	b.n	8003680 <_printf_common+0x58>
 80036f0:	2301      	movs	r3, #1
 80036f2:	4622      	mov	r2, r4
 80036f4:	4641      	mov	r1, r8
 80036f6:	4638      	mov	r0, r7
 80036f8:	47c8      	blx	r9
 80036fa:	3001      	adds	r0, #1
 80036fc:	d0e6      	beq.n	80036cc <_printf_common+0xa4>
 80036fe:	3601      	adds	r6, #1
 8003700:	e7d9      	b.n	80036b6 <_printf_common+0x8e>
	...

08003704 <_printf_i>:
 8003704:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003708:	7e0f      	ldrb	r7, [r1, #24]
 800370a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800370c:	2f78      	cmp	r7, #120	@ 0x78
 800370e:	4691      	mov	r9, r2
 8003710:	4680      	mov	r8, r0
 8003712:	460c      	mov	r4, r1
 8003714:	469a      	mov	sl, r3
 8003716:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800371a:	d807      	bhi.n	800372c <_printf_i+0x28>
 800371c:	2f62      	cmp	r7, #98	@ 0x62
 800371e:	d80a      	bhi.n	8003736 <_printf_i+0x32>
 8003720:	2f00      	cmp	r7, #0
 8003722:	f000 80d2 	beq.w	80038ca <_printf_i+0x1c6>
 8003726:	2f58      	cmp	r7, #88	@ 0x58
 8003728:	f000 80b9 	beq.w	800389e <_printf_i+0x19a>
 800372c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003730:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003734:	e03a      	b.n	80037ac <_printf_i+0xa8>
 8003736:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800373a:	2b15      	cmp	r3, #21
 800373c:	d8f6      	bhi.n	800372c <_printf_i+0x28>
 800373e:	a101      	add	r1, pc, #4	@ (adr r1, 8003744 <_printf_i+0x40>)
 8003740:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003744:	0800379d 	.word	0x0800379d
 8003748:	080037b1 	.word	0x080037b1
 800374c:	0800372d 	.word	0x0800372d
 8003750:	0800372d 	.word	0x0800372d
 8003754:	0800372d 	.word	0x0800372d
 8003758:	0800372d 	.word	0x0800372d
 800375c:	080037b1 	.word	0x080037b1
 8003760:	0800372d 	.word	0x0800372d
 8003764:	0800372d 	.word	0x0800372d
 8003768:	0800372d 	.word	0x0800372d
 800376c:	0800372d 	.word	0x0800372d
 8003770:	080038b1 	.word	0x080038b1
 8003774:	080037db 	.word	0x080037db
 8003778:	0800386b 	.word	0x0800386b
 800377c:	0800372d 	.word	0x0800372d
 8003780:	0800372d 	.word	0x0800372d
 8003784:	080038d3 	.word	0x080038d3
 8003788:	0800372d 	.word	0x0800372d
 800378c:	080037db 	.word	0x080037db
 8003790:	0800372d 	.word	0x0800372d
 8003794:	0800372d 	.word	0x0800372d
 8003798:	08003873 	.word	0x08003873
 800379c:	6833      	ldr	r3, [r6, #0]
 800379e:	1d1a      	adds	r2, r3, #4
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6032      	str	r2, [r6, #0]
 80037a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80037ac:	2301      	movs	r3, #1
 80037ae:	e09d      	b.n	80038ec <_printf_i+0x1e8>
 80037b0:	6833      	ldr	r3, [r6, #0]
 80037b2:	6820      	ldr	r0, [r4, #0]
 80037b4:	1d19      	adds	r1, r3, #4
 80037b6:	6031      	str	r1, [r6, #0]
 80037b8:	0606      	lsls	r6, r0, #24
 80037ba:	d501      	bpl.n	80037c0 <_printf_i+0xbc>
 80037bc:	681d      	ldr	r5, [r3, #0]
 80037be:	e003      	b.n	80037c8 <_printf_i+0xc4>
 80037c0:	0645      	lsls	r5, r0, #25
 80037c2:	d5fb      	bpl.n	80037bc <_printf_i+0xb8>
 80037c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80037c8:	2d00      	cmp	r5, #0
 80037ca:	da03      	bge.n	80037d4 <_printf_i+0xd0>
 80037cc:	232d      	movs	r3, #45	@ 0x2d
 80037ce:	426d      	negs	r5, r5
 80037d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037d4:	4859      	ldr	r0, [pc, #356]	@ (800393c <_printf_i+0x238>)
 80037d6:	230a      	movs	r3, #10
 80037d8:	e011      	b.n	80037fe <_printf_i+0xfa>
 80037da:	6821      	ldr	r1, [r4, #0]
 80037dc:	6833      	ldr	r3, [r6, #0]
 80037de:	0608      	lsls	r0, r1, #24
 80037e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80037e4:	d402      	bmi.n	80037ec <_printf_i+0xe8>
 80037e6:	0649      	lsls	r1, r1, #25
 80037e8:	bf48      	it	mi
 80037ea:	b2ad      	uxthmi	r5, r5
 80037ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80037ee:	4853      	ldr	r0, [pc, #332]	@ (800393c <_printf_i+0x238>)
 80037f0:	6033      	str	r3, [r6, #0]
 80037f2:	bf14      	ite	ne
 80037f4:	230a      	movne	r3, #10
 80037f6:	2308      	moveq	r3, #8
 80037f8:	2100      	movs	r1, #0
 80037fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80037fe:	6866      	ldr	r6, [r4, #4]
 8003800:	60a6      	str	r6, [r4, #8]
 8003802:	2e00      	cmp	r6, #0
 8003804:	bfa2      	ittt	ge
 8003806:	6821      	ldrge	r1, [r4, #0]
 8003808:	f021 0104 	bicge.w	r1, r1, #4
 800380c:	6021      	strge	r1, [r4, #0]
 800380e:	b90d      	cbnz	r5, 8003814 <_printf_i+0x110>
 8003810:	2e00      	cmp	r6, #0
 8003812:	d04b      	beq.n	80038ac <_printf_i+0x1a8>
 8003814:	4616      	mov	r6, r2
 8003816:	fbb5 f1f3 	udiv	r1, r5, r3
 800381a:	fb03 5711 	mls	r7, r3, r1, r5
 800381e:	5dc7      	ldrb	r7, [r0, r7]
 8003820:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003824:	462f      	mov	r7, r5
 8003826:	42bb      	cmp	r3, r7
 8003828:	460d      	mov	r5, r1
 800382a:	d9f4      	bls.n	8003816 <_printf_i+0x112>
 800382c:	2b08      	cmp	r3, #8
 800382e:	d10b      	bne.n	8003848 <_printf_i+0x144>
 8003830:	6823      	ldr	r3, [r4, #0]
 8003832:	07df      	lsls	r7, r3, #31
 8003834:	d508      	bpl.n	8003848 <_printf_i+0x144>
 8003836:	6923      	ldr	r3, [r4, #16]
 8003838:	6861      	ldr	r1, [r4, #4]
 800383a:	4299      	cmp	r1, r3
 800383c:	bfde      	ittt	le
 800383e:	2330      	movle	r3, #48	@ 0x30
 8003840:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003844:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003848:	1b92      	subs	r2, r2, r6
 800384a:	6122      	str	r2, [r4, #16]
 800384c:	f8cd a000 	str.w	sl, [sp]
 8003850:	464b      	mov	r3, r9
 8003852:	aa03      	add	r2, sp, #12
 8003854:	4621      	mov	r1, r4
 8003856:	4640      	mov	r0, r8
 8003858:	f7ff fee6 	bl	8003628 <_printf_common>
 800385c:	3001      	adds	r0, #1
 800385e:	d14a      	bne.n	80038f6 <_printf_i+0x1f2>
 8003860:	f04f 30ff 	mov.w	r0, #4294967295
 8003864:	b004      	add	sp, #16
 8003866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800386a:	6823      	ldr	r3, [r4, #0]
 800386c:	f043 0320 	orr.w	r3, r3, #32
 8003870:	6023      	str	r3, [r4, #0]
 8003872:	4833      	ldr	r0, [pc, #204]	@ (8003940 <_printf_i+0x23c>)
 8003874:	2778      	movs	r7, #120	@ 0x78
 8003876:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800387a:	6823      	ldr	r3, [r4, #0]
 800387c:	6831      	ldr	r1, [r6, #0]
 800387e:	061f      	lsls	r7, r3, #24
 8003880:	f851 5b04 	ldr.w	r5, [r1], #4
 8003884:	d402      	bmi.n	800388c <_printf_i+0x188>
 8003886:	065f      	lsls	r7, r3, #25
 8003888:	bf48      	it	mi
 800388a:	b2ad      	uxthmi	r5, r5
 800388c:	6031      	str	r1, [r6, #0]
 800388e:	07d9      	lsls	r1, r3, #31
 8003890:	bf44      	itt	mi
 8003892:	f043 0320 	orrmi.w	r3, r3, #32
 8003896:	6023      	strmi	r3, [r4, #0]
 8003898:	b11d      	cbz	r5, 80038a2 <_printf_i+0x19e>
 800389a:	2310      	movs	r3, #16
 800389c:	e7ac      	b.n	80037f8 <_printf_i+0xf4>
 800389e:	4827      	ldr	r0, [pc, #156]	@ (800393c <_printf_i+0x238>)
 80038a0:	e7e9      	b.n	8003876 <_printf_i+0x172>
 80038a2:	6823      	ldr	r3, [r4, #0]
 80038a4:	f023 0320 	bic.w	r3, r3, #32
 80038a8:	6023      	str	r3, [r4, #0]
 80038aa:	e7f6      	b.n	800389a <_printf_i+0x196>
 80038ac:	4616      	mov	r6, r2
 80038ae:	e7bd      	b.n	800382c <_printf_i+0x128>
 80038b0:	6833      	ldr	r3, [r6, #0]
 80038b2:	6825      	ldr	r5, [r4, #0]
 80038b4:	6961      	ldr	r1, [r4, #20]
 80038b6:	1d18      	adds	r0, r3, #4
 80038b8:	6030      	str	r0, [r6, #0]
 80038ba:	062e      	lsls	r6, r5, #24
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	d501      	bpl.n	80038c4 <_printf_i+0x1c0>
 80038c0:	6019      	str	r1, [r3, #0]
 80038c2:	e002      	b.n	80038ca <_printf_i+0x1c6>
 80038c4:	0668      	lsls	r0, r5, #25
 80038c6:	d5fb      	bpl.n	80038c0 <_printf_i+0x1bc>
 80038c8:	8019      	strh	r1, [r3, #0]
 80038ca:	2300      	movs	r3, #0
 80038cc:	6123      	str	r3, [r4, #16]
 80038ce:	4616      	mov	r6, r2
 80038d0:	e7bc      	b.n	800384c <_printf_i+0x148>
 80038d2:	6833      	ldr	r3, [r6, #0]
 80038d4:	1d1a      	adds	r2, r3, #4
 80038d6:	6032      	str	r2, [r6, #0]
 80038d8:	681e      	ldr	r6, [r3, #0]
 80038da:	6862      	ldr	r2, [r4, #4]
 80038dc:	2100      	movs	r1, #0
 80038de:	4630      	mov	r0, r6
 80038e0:	f7fc fc9e 	bl	8000220 <memchr>
 80038e4:	b108      	cbz	r0, 80038ea <_printf_i+0x1e6>
 80038e6:	1b80      	subs	r0, r0, r6
 80038e8:	6060      	str	r0, [r4, #4]
 80038ea:	6863      	ldr	r3, [r4, #4]
 80038ec:	6123      	str	r3, [r4, #16]
 80038ee:	2300      	movs	r3, #0
 80038f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80038f4:	e7aa      	b.n	800384c <_printf_i+0x148>
 80038f6:	6923      	ldr	r3, [r4, #16]
 80038f8:	4632      	mov	r2, r6
 80038fa:	4649      	mov	r1, r9
 80038fc:	4640      	mov	r0, r8
 80038fe:	47d0      	blx	sl
 8003900:	3001      	adds	r0, #1
 8003902:	d0ad      	beq.n	8003860 <_printf_i+0x15c>
 8003904:	6823      	ldr	r3, [r4, #0]
 8003906:	079b      	lsls	r3, r3, #30
 8003908:	d413      	bmi.n	8003932 <_printf_i+0x22e>
 800390a:	68e0      	ldr	r0, [r4, #12]
 800390c:	9b03      	ldr	r3, [sp, #12]
 800390e:	4298      	cmp	r0, r3
 8003910:	bfb8      	it	lt
 8003912:	4618      	movlt	r0, r3
 8003914:	e7a6      	b.n	8003864 <_printf_i+0x160>
 8003916:	2301      	movs	r3, #1
 8003918:	4632      	mov	r2, r6
 800391a:	4649      	mov	r1, r9
 800391c:	4640      	mov	r0, r8
 800391e:	47d0      	blx	sl
 8003920:	3001      	adds	r0, #1
 8003922:	d09d      	beq.n	8003860 <_printf_i+0x15c>
 8003924:	3501      	adds	r5, #1
 8003926:	68e3      	ldr	r3, [r4, #12]
 8003928:	9903      	ldr	r1, [sp, #12]
 800392a:	1a5b      	subs	r3, r3, r1
 800392c:	42ab      	cmp	r3, r5
 800392e:	dcf2      	bgt.n	8003916 <_printf_i+0x212>
 8003930:	e7eb      	b.n	800390a <_printf_i+0x206>
 8003932:	2500      	movs	r5, #0
 8003934:	f104 0619 	add.w	r6, r4, #25
 8003938:	e7f5      	b.n	8003926 <_printf_i+0x222>
 800393a:	bf00      	nop
 800393c:	08003c75 	.word	0x08003c75
 8003940:	08003c86 	.word	0x08003c86

08003944 <__sflush_r>:
 8003944:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800394c:	0716      	lsls	r6, r2, #28
 800394e:	4605      	mov	r5, r0
 8003950:	460c      	mov	r4, r1
 8003952:	d454      	bmi.n	80039fe <__sflush_r+0xba>
 8003954:	684b      	ldr	r3, [r1, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	dc02      	bgt.n	8003960 <__sflush_r+0x1c>
 800395a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800395c:	2b00      	cmp	r3, #0
 800395e:	dd48      	ble.n	80039f2 <__sflush_r+0xae>
 8003960:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003962:	2e00      	cmp	r6, #0
 8003964:	d045      	beq.n	80039f2 <__sflush_r+0xae>
 8003966:	2300      	movs	r3, #0
 8003968:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800396c:	682f      	ldr	r7, [r5, #0]
 800396e:	6a21      	ldr	r1, [r4, #32]
 8003970:	602b      	str	r3, [r5, #0]
 8003972:	d030      	beq.n	80039d6 <__sflush_r+0x92>
 8003974:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003976:	89a3      	ldrh	r3, [r4, #12]
 8003978:	0759      	lsls	r1, r3, #29
 800397a:	d505      	bpl.n	8003988 <__sflush_r+0x44>
 800397c:	6863      	ldr	r3, [r4, #4]
 800397e:	1ad2      	subs	r2, r2, r3
 8003980:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003982:	b10b      	cbz	r3, 8003988 <__sflush_r+0x44>
 8003984:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003986:	1ad2      	subs	r2, r2, r3
 8003988:	2300      	movs	r3, #0
 800398a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800398c:	6a21      	ldr	r1, [r4, #32]
 800398e:	4628      	mov	r0, r5
 8003990:	47b0      	blx	r6
 8003992:	1c43      	adds	r3, r0, #1
 8003994:	89a3      	ldrh	r3, [r4, #12]
 8003996:	d106      	bne.n	80039a6 <__sflush_r+0x62>
 8003998:	6829      	ldr	r1, [r5, #0]
 800399a:	291d      	cmp	r1, #29
 800399c:	d82b      	bhi.n	80039f6 <__sflush_r+0xb2>
 800399e:	4a2a      	ldr	r2, [pc, #168]	@ (8003a48 <__sflush_r+0x104>)
 80039a0:	410a      	asrs	r2, r1
 80039a2:	07d6      	lsls	r6, r2, #31
 80039a4:	d427      	bmi.n	80039f6 <__sflush_r+0xb2>
 80039a6:	2200      	movs	r2, #0
 80039a8:	6062      	str	r2, [r4, #4]
 80039aa:	04d9      	lsls	r1, r3, #19
 80039ac:	6922      	ldr	r2, [r4, #16]
 80039ae:	6022      	str	r2, [r4, #0]
 80039b0:	d504      	bpl.n	80039bc <__sflush_r+0x78>
 80039b2:	1c42      	adds	r2, r0, #1
 80039b4:	d101      	bne.n	80039ba <__sflush_r+0x76>
 80039b6:	682b      	ldr	r3, [r5, #0]
 80039b8:	b903      	cbnz	r3, 80039bc <__sflush_r+0x78>
 80039ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80039bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80039be:	602f      	str	r7, [r5, #0]
 80039c0:	b1b9      	cbz	r1, 80039f2 <__sflush_r+0xae>
 80039c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80039c6:	4299      	cmp	r1, r3
 80039c8:	d002      	beq.n	80039d0 <__sflush_r+0x8c>
 80039ca:	4628      	mov	r0, r5
 80039cc:	f7ff fbf2 	bl	80031b4 <_free_r>
 80039d0:	2300      	movs	r3, #0
 80039d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80039d4:	e00d      	b.n	80039f2 <__sflush_r+0xae>
 80039d6:	2301      	movs	r3, #1
 80039d8:	4628      	mov	r0, r5
 80039da:	47b0      	blx	r6
 80039dc:	4602      	mov	r2, r0
 80039de:	1c50      	adds	r0, r2, #1
 80039e0:	d1c9      	bne.n	8003976 <__sflush_r+0x32>
 80039e2:	682b      	ldr	r3, [r5, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0c6      	beq.n	8003976 <__sflush_r+0x32>
 80039e8:	2b1d      	cmp	r3, #29
 80039ea:	d001      	beq.n	80039f0 <__sflush_r+0xac>
 80039ec:	2b16      	cmp	r3, #22
 80039ee:	d11e      	bne.n	8003a2e <__sflush_r+0xea>
 80039f0:	602f      	str	r7, [r5, #0]
 80039f2:	2000      	movs	r0, #0
 80039f4:	e022      	b.n	8003a3c <__sflush_r+0xf8>
 80039f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039fa:	b21b      	sxth	r3, r3
 80039fc:	e01b      	b.n	8003a36 <__sflush_r+0xf2>
 80039fe:	690f      	ldr	r7, [r1, #16]
 8003a00:	2f00      	cmp	r7, #0
 8003a02:	d0f6      	beq.n	80039f2 <__sflush_r+0xae>
 8003a04:	0793      	lsls	r3, r2, #30
 8003a06:	680e      	ldr	r6, [r1, #0]
 8003a08:	bf08      	it	eq
 8003a0a:	694b      	ldreq	r3, [r1, #20]
 8003a0c:	600f      	str	r7, [r1, #0]
 8003a0e:	bf18      	it	ne
 8003a10:	2300      	movne	r3, #0
 8003a12:	eba6 0807 	sub.w	r8, r6, r7
 8003a16:	608b      	str	r3, [r1, #8]
 8003a18:	f1b8 0f00 	cmp.w	r8, #0
 8003a1c:	dde9      	ble.n	80039f2 <__sflush_r+0xae>
 8003a1e:	6a21      	ldr	r1, [r4, #32]
 8003a20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003a22:	4643      	mov	r3, r8
 8003a24:	463a      	mov	r2, r7
 8003a26:	4628      	mov	r0, r5
 8003a28:	47b0      	blx	r6
 8003a2a:	2800      	cmp	r0, #0
 8003a2c:	dc08      	bgt.n	8003a40 <__sflush_r+0xfc>
 8003a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a36:	81a3      	strh	r3, [r4, #12]
 8003a38:	f04f 30ff 	mov.w	r0, #4294967295
 8003a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a40:	4407      	add	r7, r0
 8003a42:	eba8 0800 	sub.w	r8, r8, r0
 8003a46:	e7e7      	b.n	8003a18 <__sflush_r+0xd4>
 8003a48:	dfbffffe 	.word	0xdfbffffe

08003a4c <_fflush_r>:
 8003a4c:	b538      	push	{r3, r4, r5, lr}
 8003a4e:	690b      	ldr	r3, [r1, #16]
 8003a50:	4605      	mov	r5, r0
 8003a52:	460c      	mov	r4, r1
 8003a54:	b913      	cbnz	r3, 8003a5c <_fflush_r+0x10>
 8003a56:	2500      	movs	r5, #0
 8003a58:	4628      	mov	r0, r5
 8003a5a:	bd38      	pop	{r3, r4, r5, pc}
 8003a5c:	b118      	cbz	r0, 8003a66 <_fflush_r+0x1a>
 8003a5e:	6a03      	ldr	r3, [r0, #32]
 8003a60:	b90b      	cbnz	r3, 8003a66 <_fflush_r+0x1a>
 8003a62:	f7ff f9ad 	bl	8002dc0 <__sinit>
 8003a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0f3      	beq.n	8003a56 <_fflush_r+0xa>
 8003a6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003a70:	07d0      	lsls	r0, r2, #31
 8003a72:	d404      	bmi.n	8003a7e <_fflush_r+0x32>
 8003a74:	0599      	lsls	r1, r3, #22
 8003a76:	d402      	bmi.n	8003a7e <_fflush_r+0x32>
 8003a78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a7a:	f7ff fb98 	bl	80031ae <__retarget_lock_acquire_recursive>
 8003a7e:	4628      	mov	r0, r5
 8003a80:	4621      	mov	r1, r4
 8003a82:	f7ff ff5f 	bl	8003944 <__sflush_r>
 8003a86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a88:	07da      	lsls	r2, r3, #31
 8003a8a:	4605      	mov	r5, r0
 8003a8c:	d4e4      	bmi.n	8003a58 <_fflush_r+0xc>
 8003a8e:	89a3      	ldrh	r3, [r4, #12]
 8003a90:	059b      	lsls	r3, r3, #22
 8003a92:	d4e1      	bmi.n	8003a58 <_fflush_r+0xc>
 8003a94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a96:	f7ff fb8b 	bl	80031b0 <__retarget_lock_release_recursive>
 8003a9a:	e7dd      	b.n	8003a58 <_fflush_r+0xc>

08003a9c <__swhatbuf_r>:
 8003a9c:	b570      	push	{r4, r5, r6, lr}
 8003a9e:	460c      	mov	r4, r1
 8003aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003aa4:	2900      	cmp	r1, #0
 8003aa6:	b096      	sub	sp, #88	@ 0x58
 8003aa8:	4615      	mov	r5, r2
 8003aaa:	461e      	mov	r6, r3
 8003aac:	da0d      	bge.n	8003aca <__swhatbuf_r+0x2e>
 8003aae:	89a3      	ldrh	r3, [r4, #12]
 8003ab0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003ab4:	f04f 0100 	mov.w	r1, #0
 8003ab8:	bf14      	ite	ne
 8003aba:	2340      	movne	r3, #64	@ 0x40
 8003abc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	6031      	str	r1, [r6, #0]
 8003ac4:	602b      	str	r3, [r5, #0]
 8003ac6:	b016      	add	sp, #88	@ 0x58
 8003ac8:	bd70      	pop	{r4, r5, r6, pc}
 8003aca:	466a      	mov	r2, sp
 8003acc:	f000 f848 	bl	8003b60 <_fstat_r>
 8003ad0:	2800      	cmp	r0, #0
 8003ad2:	dbec      	blt.n	8003aae <__swhatbuf_r+0x12>
 8003ad4:	9901      	ldr	r1, [sp, #4]
 8003ad6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003ada:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003ade:	4259      	negs	r1, r3
 8003ae0:	4159      	adcs	r1, r3
 8003ae2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ae6:	e7eb      	b.n	8003ac0 <__swhatbuf_r+0x24>

08003ae8 <__smakebuf_r>:
 8003ae8:	898b      	ldrh	r3, [r1, #12]
 8003aea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003aec:	079d      	lsls	r5, r3, #30
 8003aee:	4606      	mov	r6, r0
 8003af0:	460c      	mov	r4, r1
 8003af2:	d507      	bpl.n	8003b04 <__smakebuf_r+0x1c>
 8003af4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003af8:	6023      	str	r3, [r4, #0]
 8003afa:	6123      	str	r3, [r4, #16]
 8003afc:	2301      	movs	r3, #1
 8003afe:	6163      	str	r3, [r4, #20]
 8003b00:	b003      	add	sp, #12
 8003b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b04:	ab01      	add	r3, sp, #4
 8003b06:	466a      	mov	r2, sp
 8003b08:	f7ff ffc8 	bl	8003a9c <__swhatbuf_r>
 8003b0c:	9f00      	ldr	r7, [sp, #0]
 8003b0e:	4605      	mov	r5, r0
 8003b10:	4639      	mov	r1, r7
 8003b12:	4630      	mov	r0, r6
 8003b14:	f7ff fbba 	bl	800328c <_malloc_r>
 8003b18:	b948      	cbnz	r0, 8003b2e <__smakebuf_r+0x46>
 8003b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b1e:	059a      	lsls	r2, r3, #22
 8003b20:	d4ee      	bmi.n	8003b00 <__smakebuf_r+0x18>
 8003b22:	f023 0303 	bic.w	r3, r3, #3
 8003b26:	f043 0302 	orr.w	r3, r3, #2
 8003b2a:	81a3      	strh	r3, [r4, #12]
 8003b2c:	e7e2      	b.n	8003af4 <__smakebuf_r+0xc>
 8003b2e:	89a3      	ldrh	r3, [r4, #12]
 8003b30:	6020      	str	r0, [r4, #0]
 8003b32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b36:	81a3      	strh	r3, [r4, #12]
 8003b38:	9b01      	ldr	r3, [sp, #4]
 8003b3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003b3e:	b15b      	cbz	r3, 8003b58 <__smakebuf_r+0x70>
 8003b40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b44:	4630      	mov	r0, r6
 8003b46:	f000 f81d 	bl	8003b84 <_isatty_r>
 8003b4a:	b128      	cbz	r0, 8003b58 <__smakebuf_r+0x70>
 8003b4c:	89a3      	ldrh	r3, [r4, #12]
 8003b4e:	f023 0303 	bic.w	r3, r3, #3
 8003b52:	f043 0301 	orr.w	r3, r3, #1
 8003b56:	81a3      	strh	r3, [r4, #12]
 8003b58:	89a3      	ldrh	r3, [r4, #12]
 8003b5a:	431d      	orrs	r5, r3
 8003b5c:	81a5      	strh	r5, [r4, #12]
 8003b5e:	e7cf      	b.n	8003b00 <__smakebuf_r+0x18>

08003b60 <_fstat_r>:
 8003b60:	b538      	push	{r3, r4, r5, lr}
 8003b62:	4d07      	ldr	r5, [pc, #28]	@ (8003b80 <_fstat_r+0x20>)
 8003b64:	2300      	movs	r3, #0
 8003b66:	4604      	mov	r4, r0
 8003b68:	4608      	mov	r0, r1
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	602b      	str	r3, [r5, #0]
 8003b6e:	f7fc feda 	bl	8000926 <_fstat>
 8003b72:	1c43      	adds	r3, r0, #1
 8003b74:	d102      	bne.n	8003b7c <_fstat_r+0x1c>
 8003b76:	682b      	ldr	r3, [r5, #0]
 8003b78:	b103      	cbz	r3, 8003b7c <_fstat_r+0x1c>
 8003b7a:	6023      	str	r3, [r4, #0]
 8003b7c:	bd38      	pop	{r3, r4, r5, pc}
 8003b7e:	bf00      	nop
 8003b80:	20000288 	.word	0x20000288

08003b84 <_isatty_r>:
 8003b84:	b538      	push	{r3, r4, r5, lr}
 8003b86:	4d06      	ldr	r5, [pc, #24]	@ (8003ba0 <_isatty_r+0x1c>)
 8003b88:	2300      	movs	r3, #0
 8003b8a:	4604      	mov	r4, r0
 8003b8c:	4608      	mov	r0, r1
 8003b8e:	602b      	str	r3, [r5, #0]
 8003b90:	f7fc fed9 	bl	8000946 <_isatty>
 8003b94:	1c43      	adds	r3, r0, #1
 8003b96:	d102      	bne.n	8003b9e <_isatty_r+0x1a>
 8003b98:	682b      	ldr	r3, [r5, #0]
 8003b9a:	b103      	cbz	r3, 8003b9e <_isatty_r+0x1a>
 8003b9c:	6023      	str	r3, [r4, #0]
 8003b9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ba0:	20000288 	.word	0x20000288

08003ba4 <_sbrk_r>:
 8003ba4:	b538      	push	{r3, r4, r5, lr}
 8003ba6:	4d06      	ldr	r5, [pc, #24]	@ (8003bc0 <_sbrk_r+0x1c>)
 8003ba8:	2300      	movs	r3, #0
 8003baa:	4604      	mov	r4, r0
 8003bac:	4608      	mov	r0, r1
 8003bae:	602b      	str	r3, [r5, #0]
 8003bb0:	f7fc fee2 	bl	8000978 <_sbrk>
 8003bb4:	1c43      	adds	r3, r0, #1
 8003bb6:	d102      	bne.n	8003bbe <_sbrk_r+0x1a>
 8003bb8:	682b      	ldr	r3, [r5, #0]
 8003bba:	b103      	cbz	r3, 8003bbe <_sbrk_r+0x1a>
 8003bbc:	6023      	str	r3, [r4, #0]
 8003bbe:	bd38      	pop	{r3, r4, r5, pc}
 8003bc0:	20000288 	.word	0x20000288

08003bc4 <_init>:
 8003bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc6:	bf00      	nop
 8003bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bca:	bc08      	pop	{r3}
 8003bcc:	469e      	mov	lr, r3
 8003bce:	4770      	bx	lr

08003bd0 <_fini>:
 8003bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd2:	bf00      	nop
 8003bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bd6:	bc08      	pop	{r3}
 8003bd8:	469e      	mov	lr, r3
 8003bda:	4770      	bx	lr
